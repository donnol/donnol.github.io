<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Join on 我的简单博客</title><link>https://donnol.github.io/tags/join/</link><description>Recent content in Join on 我的简单博客</description><generator>Hugo 0.125.1</generator><language>en</language><lastBuildDate>Fri, 06 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/tags/join/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Generic Join</title><link>https://donnol.github.io/posts/2023/01/go_generic_join/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/01/go_generic_join/</guid><description>// NestedJoin like nested loop join func NestedJoin[J, K, R any]( left []J, right []K, match func(J, K) bool, mapper func(J, K) R, ) []R { var r = make([]R, 0, len(left)) for _, j := range left { for _, k := range right { if !match(j, k) { continue } r = append(r, mapper(j, k)) } } return r } // HashJoin like hash join func HashJoin[K comparable, LE, RE, R any]( left []LE, right []RE, lk func(item LE) K, rk func(item RE) K, mapper func(LE, RE) R, ) []R { var r = make([]R, 0, len(left)) rm := KeyBy(right, rk) for _, le := range left { k := lk(le) re := rm[k] r = append(r, mapper(le, re)) } return r } Code From</description></item></channel></rss>