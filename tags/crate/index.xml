<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>crate on 我的简单博客</title><link>https://donnol.github.io/tags/crate/</link><description>Recent content in crate on 我的简单博客</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 10 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/tags/crate/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust常用库</title><link>https://donnol.github.io/posts/2022/01/rust_commonly_used_crate/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/rust_commonly_used_crate/</guid><description>crossbeam # crossbeam: Tools for concurrent programming in Rust.
Atomics
Data structures
Memory management: epoch
Thread synchronization: channel, Parker, ShardedLock, WaitGroup
Utilities
channel example # use crossbeam_channel::unbounded; let (s, r) = unbounded(); s.send(&amp;#34;Hello, world!&amp;#34;).unwrap(); assert_eq!(r.recv(), Ok(&amp;#34;Hello, world!&amp;#34;)); unbounded(无限) channel发送时不用等接收端就绪。
另外还有bounded channel可在新建时指定容量，后续发送的消息数不能超过该数据 &amp;ndash; 除非中间有消息被取走了
当bounded channel容量设为0时，发送前必须等接收端就绪，一般可用于线程间等待。
更多介绍
与标准库的sync::mpsc对比
epoch # Pin 做了什么？</description></item></channel></rss>