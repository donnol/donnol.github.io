<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on 我的简单博客</title><link>https://donnol.github.io/categories/docker/</link><description>Recent content in Docker on 我的简单博客</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 26 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>容器镜像加密</title><link>https://donnol.github.io/posts/2022/01/container_encrypt/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/container_encrypt/</guid><description>&lt;p>如果我在创建镜像时把源码也打包了进去，要怎么防止别人通过这个镜像把源码给窃取了呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>加密&lt;/p>
&lt;p>镜像加密&lt;/p>
&lt;p>源码加密：在COPY源码进去之前先加密；这种适合服务器不是自己的，并且在局域网里的（接过医院系统的应该都懂吧）；留这样一份加密源码也只是在方便有bug时可以快速修复的同时，还可以稍微保护一下源码；&lt;/p>
&lt;pre>&lt;code> 先使用zip压缩源码：`zip -q -r code.zip ./code`；
 再使用gpg加密：`gpg --yes --batch --passphrase=123 -c ebpf.zip`； -- 通过`--yes --batch --passphrase`三个选项避免键盘交互，最后生成`ebpf.zip.gpg`。
 后续进入容器后，使用gpg解密：`gpg -o ebpf2.zip -d ebpf.zip.gpg`；
 再使用unzip解压：`unzip -d ebpf2 ebpf2.zip`。
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>在镜像构建后，还要防止&lt;code>docker history -H cb0b42c0cb03 --no-trunc=true&lt;/code>查看镜像构建历史时，泄露秘钥等信息。&amp;ndash; 可使用多阶段构建：在前一阶段使用密钥加密源码，后一阶段复制加密源码，从而避免密钥泄露。因为一般只需要把后一阶段构建出来的镜像分发出去就好了，而查看后一阶段构建出来的镜像的构建历史，是看不到密钥信息的（查看前一阶段的构建历史才会看到）。&lt;/p>
&lt;h2 id="dockerfile-copy-before-mkdir-will-get-a-no-such-file-or-directory-error">
 dockerfile COPY before mkdir will get a &lt;code>no such file or directory&lt;/code> error
 &lt;a class="anchor" href="#dockerfile-copy-before-mkdir-will-get-a-no-such-file-or-directory-error">#&lt;/a>
&lt;/h2>
&lt;p>&lt;del>error:&lt;/del>&lt;/p></description></item><item><title>docker compose使用extra host让容器访问主机服务</title><link>https://donnol.github.io/posts/2021/12/docker_compose_extra_host/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/docker_compose_extra_host/</guid><description>&lt;p>
 &lt;a href="https://donnol.github.io/posts/2021/12/docker_compose_extra_host/">首发于：简单博客&lt;/a>&lt;/p>
&lt;h2 id="docker-compose-如何访问主机服务">
 docker compose 如何访问主机服务
 &lt;a class="anchor" href="#docker-compose-%e5%a6%82%e4%bd%95%e8%ae%bf%e9%97%ae%e4%b8%bb%e6%9c%ba%e6%9c%8d%e5%8a%a1">#&lt;/a>
&lt;/h2>
&lt;p>docker compose 里面的容器怎么访问主机自身起的服务呢？&lt;/p>
&lt;p>
 &lt;a href="https://docs.docker.com/engine/release-notes/#networking-3">20.10.0 版本在 linux 新增 host.docker.internal 支持&lt;/a>：
&lt;code>docker run -it --add-host=host.docker.internal:host-gateway alpine cat /etc/hosts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>127.0.0.1 localhost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>::1 localhost ip6-localhost ip6-loopback
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fe00::0 ip6-localnet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ff00::0 ip6-mcastprefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ff02::1 ip6-allnodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ff02::2 ip6-allrouters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.17.0.1 host.docker.internal &lt;span style="color:#75715e"># --add-host的作用就是添加了这行到/etc/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.17.0.3 cb0565ceea26
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item></channel></rss>