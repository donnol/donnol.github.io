<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Escape Analysis on 我的简单博客</title><link>https://donnol.github.io/categories/escape-analysis/</link><description>Recent content in Escape Analysis on 我的简单博客</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 20 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/categories/escape-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Go escape analysis</title><link>https://donnol.github.io/posts/2023/09/go_escape_analysis/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/go_escape_analysis/</guid><description>&lt;blockquote>
&lt;p>The meaning of &lt;code>escapes to the heap&lt;/code> is variables needs to &lt;code>be shared across the function stack frames&lt;/code> [between main() and Println()]
&amp;hellip;&lt;/p>
&lt;p>&amp;hellip;
So &lt;code>globally access variables&lt;/code> must be &lt;code>moved to heap&lt;/code> as it requires runtime. So the output line 11:2 shows the same as the data variable moved to the heap memory.&lt;/p>
&lt;/blockquote>
&lt;p>
 &lt;a href="https://mayurwadekar2.medium.com/escape-analysis-in-golang-ee40a1c064c1">From&lt;/a>&lt;/p></description></item></channel></rss>