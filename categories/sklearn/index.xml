<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sklearn on 我的简单博客</title><link>https://donnol.github.io/categories/sklearn/</link><description>Recent content in sklearn on 我的简单博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 26 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/categories/sklearn/index.xml" rel="self" type="application/rss+xml"/><item><title>ml sklearn</title><link>https://donnol.github.io/posts/2023/06/sklearn/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/sklearn/</guid><description>尝试 # $ pip install scikit-learn $ python3.10 &amp;gt;&amp;gt;&amp;gt; from sklearn.datasets import load_iris &amp;gt;&amp;gt;&amp;gt; from sklearn.linear_model import LogisticRegression &amp;gt;&amp;gt;&amp;gt; data, y = load_iris(return_X_y=True) &amp;gt;&amp;gt;&amp;gt; clf = LogisticRegression(random_state=0, max_iter=1000).fit(data, y) &amp;gt;&amp;gt;&amp;gt; clf.predict(data[:2, :]) &amp;gt;&amp;gt;&amp;gt; clf.predict_proba(data[:2, :]) &amp;gt;&amp;gt;&amp;gt; clf.score(data, y) 查找操作记录 # cat ~/.python_history.
模型、策略、优化算法 # 模型是输入输出函数：Y = F(X).
策略是拟合过程的损失函数：L(Y, F(X)), 可以是均方误差、对数损失函数、交叉熵损失函数。
优化算法：确定模型和损失函数后，可以加速计算的方法，比如：随机梯度下降法、牛顿法、拟牛顿法。</description></item></channel></rss>