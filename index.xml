<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>简单博客 on 我的简单博客</title><link>https://donnol.github.io/</link><description>Recent content in 简单博客 on 我的简单博客</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 07 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>dbeaver手动导入驱动</title><link>https://donnol.github.io/posts/2023/12/dbeaver%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%85%A5%E9%A9%B1%E5%8A%A8/</link><pubDate>Thu, 07 Dec 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/dbeaver%E6%89%8B%E5%8A%A8%E5%AF%BC%E5%85%A5%E9%A9%B1%E5%8A%A8/</guid><description>&lt;p>因为直接下载&lt;code>dbeaver&lt;/code>的时候，是没有带上驱动文件的，所以需要在使用时下载。&lt;/p>
&lt;p>但是，如果刚好安装的环境是无法通网的，那么就需要手动传入驱动并安装。&lt;/p>
&lt;p>做法如下：&lt;/p>
&lt;ol>
&lt;li>现在本地有网环境下载驱动文件&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>用&lt;code>dbeaver&lt;/code>下载&lt;code>mysql&lt;/code>的驱动，会存放在目录：&lt;code>C:\Users\{用户名}\AppData\Roaming\DBeaverData\drivers\maven\maven-central\mysql&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>NOTE: 注意替换&lt;code>{用户名}&lt;/code>为你本机实际名称。&lt;/p>
&lt;ol start="2">
&lt;li>
&lt;p>把下好的文件传入到无网机器上，同样放到以上目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开&lt;code>dbeaver&lt;/code>，&lt;code>数据库&lt;/code>-&amp;gt;&lt;code>驱动管理器&lt;/code>，添加驱动&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>选中&lt;code>MySQL&lt;/code>，然后点击编辑；在弹出框里切到&lt;code>库&lt;/code>，将已有内容全部删掉，再点击&lt;code>添加文件夹&lt;/code>，然后选择上面驱动存放的目录，即可确定保存。&lt;/p>
&lt;/blockquote>
&lt;p>如此，即可手动导入驱动文件。&lt;/p></description></item><item><title>Mysql 8.0.33在使用窗口函数的同时不能用count(distinct *)</title><link>https://donnol.github.io/posts/2023/10/mysql_count_distinct_with_over/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/10/mysql_count_distinct_with_over/</guid><description>&lt;p>&lt;code>Mysql 8.0.33&lt;/code>在使用窗口函数的同时不能用&lt;code>count(distinct *)&lt;/code>&lt;/p>
&lt;p>比如，我想在窗口函数里使用字段&lt;code>apply_unit_id&lt;/code>分组，然后求&lt;code>project_id&lt;/code>列不重复值的数量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#66d9ef">distinct&lt;/span> apply_unit_id, &lt;span style="color:#66d9ef">count&lt;/span>(&lt;span style="color:#66d9ef">distinct&lt;/span> project_id) over (partition &lt;span style="color:#66d9ef">by&lt;/span> apply_unit_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">from&lt;/span> weia &lt;span style="color:#66d9ef">join&lt;/span> weiag &lt;span style="color:#66d9ef">on&lt;/span> weiag.apply_id &lt;span style="color:#f92672">=&lt;/span> weia.id 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时报错：&lt;code>SQL 错误 [1235] [42000]: This version of MySQL doesn't yet support '&amp;lt;window function&amp;gt;(DISTINCT ..)'&lt;/code>&lt;/p>
&lt;h2 id="怎么办呢">
 怎么办呢？
 &lt;a class="anchor" href="#%e6%80%8e%e4%b9%88%e5%8a%9e%e5%91%a2">#&lt;/a>
&lt;/h2>
&lt;p>使用
 &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_dense-rank">&lt;code>dense_rank()&lt;/code>&lt;/a>间接计算：&lt;/p></description></item><item><title>Wezterm极简配置文件</title><link>https://donnol.github.io/posts/2023/10/wezterm/</link><pubDate>Tue, 17 Oct 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/10/wezterm/</guid><description>&lt;p>&lt;code>Wezterm&lt;/code>极简配置文件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Pull in the wezterm API&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> wezterm &lt;span style="color:#f92672">=&lt;/span> require &lt;span style="color:#e6db74">&amp;#39;wezterm&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- This table will hold the configuration.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> config &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- In newer versions of wezterm, use the config_builder which will&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- help provide clearer error messages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> wezterm.config_builder &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#f92672">=&lt;/span> wezterm.config_builder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- This is where you actually apply your config choices&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- For example, changing the color scheme:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.color_scheme &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;AdventureTime&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- config.color_scheme = &amp;#39;Batman&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.enable_tab_bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.hide_tab_bar_if_only_one_tab &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.show_tab_index_in_tab_bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.tab_bar_at_bottom &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.tab_max_width &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Font&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- config.font = wezterm.font_with_fallback { &amp;#39;JetBrains Mono&amp;#39; }&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.font_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.freetype_load_target &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Light&amp;#34;&lt;/span> &lt;span style="color:#75715e">-- Possible alternatives are `HorizontalLcd`, `Light`, `Mono`, `Normal`, `VerticalLcd`.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.mouse_bindings &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#75715e">-- Paste on right-click&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Down &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> streak &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> button &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Right&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;NONE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> action &lt;span style="color:#f92672">=&lt;/span> wezterm.action {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PasteFrom &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Clipboard&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#75715e">-- Change the default click behavior so that it only selects&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Up &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> streak &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> button &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Left&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;NONE&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> action &lt;span style="color:#f92672">=&lt;/span> wezterm.action {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CompleteSelection &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;PrimarySelection&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#75715e">-- CTRL-Click open hyperlinks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Up &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> streak &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> button &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Left&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;CTRL&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> action &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;OpenLinkAtMouseCursor&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config.keys &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- 使用 Ctrl+n 来新建标签页，而不是 Ctrl+Shift+T&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;n&amp;#34;&lt;/span>, mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ALT&amp;#34;&lt;/span>, action &lt;span style="color:#f92672">=&lt;/span> wezterm.action { SpawnTab &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;DefaultDomain&amp;#34;&lt;/span> } },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- 使用 Alt+左右箭头来切换标签页&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;LeftArrow&amp;#34;&lt;/span>, mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ALT&amp;#34;&lt;/span>, action &lt;span style="color:#f92672">=&lt;/span> wezterm.action { ActivateTabRelative &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> } },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;RightArrow&amp;#34;&lt;/span>, mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ALT&amp;#34;&lt;/span>, action &lt;span style="color:#f92672">=&lt;/span> wezterm.action { ActivateTabRelative &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> } },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 定义 Alt+数字 切换到对应标签页的快捷键&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table.insert(config.keys, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key &lt;span style="color:#f92672">=&lt;/span> tostring(i),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mods &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ALT&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> action &lt;span style="color:#f92672">=&lt;/span> wezterm.action.ActivateTab(i &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- and finally, return the configuration to wezterm&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> config
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>雪花id的时钟回退问题</title><link>https://donnol.github.io/posts/2023/09/%E9%9B%AA%E8%8A%B1id-%E6%97%B6%E9%92%9F%E5%9B%9E%E9%80%80%E9%97%AE%E9%A2%98/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/%E9%9B%AA%E8%8A%B1id-%E6%97%B6%E9%92%9F%E5%9B%9E%E9%80%80%E9%97%AE%E9%A2%98/</guid><description>&lt;p>雪花id由64位二进制组成，转成字符串则长为19. 它依赖于系统时钟，如果出现时钟回退，会导致已经在用的id再次被生成。&lt;/p>
&lt;p>怎么办呢？&lt;/p>
&lt;ol start="0">
&lt;li>
&lt;p>记录上次生成时间，在本次生成时比较时间，如果当前时间比上次生成时间要小，则认为时钟回拨，直接报错。也可以一直重试，直到当前时间不小于上次生成时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>采用历史时间则天然的不存在时间回拨问题。但是在超高并发情况下，历史的时间很快用完，时间一直保持在最新时间的话，这个时候还是会出现时间回拨。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go1.9开始，使用单调时钟: time.Now(), time.Since(), time.Until().&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>// # Monotonic Clocks&lt;/p>
&lt;p>//&lt;/p>
&lt;p>// Operating systems provide both a “wall clock,” which is subject to&lt;/p>
&lt;p>// changes for clock synchronization, and a “monotonic clock,” which is&lt;/p>
&lt;p>// not. The general rule is that the wall clock is for telling time and&lt;/p></description></item><item><title>Go escape analysis</title><link>https://donnol.github.io/posts/2023/09/go_escape_analysis/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/go_escape_analysis/</guid><description>&lt;blockquote>
&lt;p>The meaning of &lt;code>escapes to the heap&lt;/code> is variables needs to &lt;code>be shared across the function stack frames&lt;/code> [between main() and Println()]
&amp;hellip;&lt;/p>
&lt;p>&amp;hellip;
So &lt;code>globally access variables&lt;/code> must be &lt;code>moved to heap&lt;/code> as it requires runtime. So the output line 11:2 shows the same as the data variable moved to the heap memory.&lt;/p>
&lt;/blockquote>
&lt;p>
 &lt;a href="https://mayurwadekar2.medium.com/escape-analysis-in-golang-ee40a1c064c1">From&lt;/a>&lt;/p></description></item><item><title>What are you preparing to do?</title><link>https://donnol.github.io/posts/2023/09/do/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/do/</guid><description>&lt;p>他想做的事情，与你想他做的事情，与你在做的事情。&lt;/p>
&lt;p>这些事情之间是否存在交集，如果一点都没有，那不就是事与愿违了吗？&lt;/p></description></item><item><title>查找并杀掉运行中事务</title><link>https://donnol.github.io/posts/2023/09/mysql/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/mysql/</guid><description>&lt;h2 id="查找并杀掉运行中事务">
 查找并杀掉运行中事务
 &lt;a class="anchor" href="#%e6%9f%a5%e6%89%be%e5%b9%b6%e6%9d%80%e6%8e%89%e8%bf%90%e8%a1%8c%e4%b8%ad%e4%ba%8b%e5%8a%a1">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 获取线程id然后杀掉
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> information_schema.innodb_trx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 优先找到其中耗时最长的删
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>kill &lt;span style="color:#ae81ff">36272&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kill &lt;span style="color:#ae81ff">36275&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kill &lt;span style="color:#ae81ff">35971&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kill &lt;span style="color:#ae81ff">35972&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 其它
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> performance_schema.events_statements_current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">show&lt;/span> processlist;
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Vscode go cannot find GOROOT directory</title><link>https://donnol.github.io/posts/2023/09/goenv/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/goenv/</guid><description>&lt;p>今天发现在windows上的vscode一直提示找不到go：&lt;code>go: cannot find GOROOT directory: c:\msys64\mingw64\lib\go&lt;/code>。&lt;/p>
&lt;p>强制设置了go.goroot也不行，直到查看了GOENV文件（C:\Users\xxx\AppData\Roaming\go\env）之后，才发现里面有一行：GOROOT=c:\msys64\mingw64\lib\go，可能是当时在msys2安装go的时候加上的。&lt;/p>
&lt;p>去掉它就恢复正常了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOENV&lt;span style="color:#f92672">=&lt;/span>C:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\x&lt;/span>xx&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\g&lt;/span>o&lt;span style="color:#ae81ff">\e&lt;/span>nv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOHOSTARCH&lt;span style="color:#f92672">=&lt;/span>amd64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOHOSTOS&lt;span style="color:#f92672">=&lt;/span>windows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOMODCACHE&lt;span style="color:#f92672">=&lt;/span>C:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\x&lt;/span>xx&lt;span style="color:#ae81ff">\g&lt;/span>o&lt;span style="color:#ae81ff">\p&lt;/span>kg&lt;span style="color:#ae81ff">\m&lt;/span>od
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOOS&lt;span style="color:#f92672">=&lt;/span>windows
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOPATH&lt;span style="color:#f92672">=&lt;/span>C:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\x&lt;/span>xx&lt;span style="color:#ae81ff">\g&lt;/span>o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOPRIVATE&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn,https://goproxy.io,direct
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set GOROOT&lt;span style="color:#f92672">=&lt;/span>C:&lt;span style="color:#ae81ff">\P&lt;/span>rogram Files&lt;span style="color:#ae81ff">\G&lt;/span>o
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>不同系统之间通过网络对接</title><link>https://donnol.github.io/posts/2023/09/%E7%B3%BB%E7%BB%9F%E9%97%B4%E9%80%9A%E8%BF%87%E7%BD%91%E7%BB%9C%E4%BA%A4%E4%BA%92%E4%BB%A5%E5%AE%8C%E6%88%90%E4%BA%8B%E5%8A%A1/</link><pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/%E7%B3%BB%E7%BB%9F%E9%97%B4%E9%80%9A%E8%BF%87%E7%BD%91%E7%BB%9C%E4%BA%A4%E4%BA%92%E4%BB%A5%E5%AE%8C%E6%88%90%E4%BA%8B%E5%8A%A1/</guid><description>&lt;p>不同系统之间通过网络对接&lt;/p>
&lt;h2 id="数据库事件">
 数据库事件
 &lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e4%ba%8b%e4%bb%b6">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>可以用个&lt;code>事件表&lt;/code>来做，在事务执行过程中添加&lt;code>事件&lt;/code>(确保事务完成时事件也存在)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在事务提交之后，先尝试做一次事件，如果成功了就把事件状态置为成功；如果失败了也没关系，另外开定时器来扫表进行&lt;code>重试&lt;/code>执行。 &amp;ndash; 此时不影响正常业务执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在事件处理事务里的网络请求里加入超时控制，确保事件不会执行太久，导致接口过慢。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网络请求支持&lt;code>幂等&lt;/code>，防止事件处理事务请求成功了，但是事务挂了导致状态未变更，这种情况下会重复请求多次。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="skip-locked实现">
 &lt;code>skip locked&lt;/code>实现
 &lt;a class="anchor" href="#skip-locked%e5%ae%9e%e7%8e%b0">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 条件字段必须有索引(status, [name, status])，排序字段必须是主键(id)，此时刚好是所要锁定的行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">start&lt;/span> &lt;span style="color:#66d9ef">transaction&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- select * from w_event we where status in (1) order by create_time asc limit 1 for update skip locked; -- 引入create_time作为排序字段时，会将符合条件的行都锁住，`limit 1`不起作用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> w_event we &lt;span style="color:#66d9ef">where&lt;/span> status &lt;span style="color:#66d9ef">in&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> id &lt;span style="color:#66d9ef">asc&lt;/span> &lt;span style="color:#66d9ef">limit&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">update&lt;/span> skip locked; &lt;span style="color:#75715e">-- 使用主键字段作排序时，`limit 1`则起作用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> w_event we &lt;span style="color:#66d9ef">where&lt;/span> name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;测试&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">and&lt;/span> status &lt;span style="color:#66d9ef">in&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> id &lt;span style="color:#66d9ef">asc&lt;/span> &lt;span style="color:#66d9ef">limit&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">update&lt;/span> skip locked; &lt;span style="color:#75715e">-- 如果有多个字段作为条件，需要建立组合索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">SELECT&lt;/span> object_name, index_name, lock_type, lock_mode, lock_data &lt;span style="color:#66d9ef">FROM&lt;/span> performance_schema.data_locks; &lt;span style="color:#75715e">-- 查看上锁情况
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> w_event we &lt;span style="color:#66d9ef">where&lt;/span> status &lt;span style="color:#66d9ef">in&lt;/span> (&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> id &lt;span style="color:#66d9ef">asc&lt;/span> &lt;span style="color:#66d9ef">limit&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">update&lt;/span> skip locked;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> w_event we &lt;span style="color:#66d9ef">where&lt;/span> status &lt;span style="color:#66d9ef">in&lt;/span> (&lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#66d9ef">order&lt;/span> &lt;span style="color:#66d9ef">by&lt;/span> id &lt;span style="color:#66d9ef">asc&lt;/span> &lt;span style="color:#66d9ef">limit&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">update&lt;/span> skip locked;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">commit&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>do</title><link>https://donnol.github.io/posts/2023/09/your_life/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/your_life/</guid><description>&lt;p>你在做的事情，是在重复已知的东西，还是在探索未知的东西。&lt;/p>
&lt;p>这决定了所能达到的高度。&lt;/p></description></item><item><title>Go Empty Struct</title><link>https://donnol.github.io/posts/2023/09/go_empty_struct/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/go_empty_struct/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;unsafe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 结构体里的字段都是`Empty Struct`时，占用空间为0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#a6e22e">B&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">S&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Sizeof&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>)) &lt;span style="color:#75715e">// prints 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 如果是指针，占用空间为8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Sizeof&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>)) &lt;span style="color:#75715e">// prints 8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> [&lt;span style="color:#ae81ff">1000000000&lt;/span>]&lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 可以同时存储A和B类型元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">x&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] = &lt;span style="color:#a6e22e">A&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">x&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#a6e22e">B&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Sizeof&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)) &lt;span style="color:#75715e">// prints 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 地址一样
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%p, %p&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">x&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#75715e">// 0x54e3a0, 0x54e3a0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Jupyter notebook</title><link>https://donnol.github.io/posts/2023/07/jupyter/</link><pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/07/jupyter/</guid><description>&lt;p>Install: &lt;code>pip install --user jupyter&lt;/code>.&lt;/p>
&lt;p>Install plugin: &lt;code>jupyter install matplotlib&lt;/code>.&lt;/p>
&lt;p>Install rust tools: &lt;code>cargo install evcxr_jupyter&lt;/code> &amp;amp;&amp;amp; &lt;code>evcxr_jupyter --install&lt;/code>.&lt;/p>
&lt;p>Install plugin: &lt;code>jupyter install plotters&lt;/code>.&lt;/p>
&lt;p>Start: &lt;code>jupyter notebook --port 35222&lt;/code>.&lt;/p></description></item><item><title>Vscode Translate</title><link>https://donnol.github.io/posts/2023/07/vscode_traslate/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/07/vscode_traslate/</guid><description>&lt;p>试了几个&lt;code>vscode&lt;/code>的翻译插件，包括&lt;code>Google Translate&lt;/code>, &lt;code>Comment Translate&lt;/code>, &lt;code>Translate Var&lt;/code>。&lt;/p>
&lt;p>来自&lt;code>intellsmi&lt;/code>的&lt;code>Comment Translate&lt;/code>最终脱颖而出。&lt;/p>
&lt;p>它支持&lt;code>Google&lt;/code>, &lt;code>Bing&lt;/code>, &lt;code>Baidu&lt;/code>等翻译工具。&lt;/p>
&lt;p>设置：选择翻译工具&lt;code>Bing&lt;/code>，再设置源语言和目标语言。&lt;/p>
&lt;p>使用：选中单词即会自动翻译，非常方便。&lt;/p></description></item><item><title>Windows restart remote service</title><link>https://donnol.github.io/posts/2023/07/windows_restart_remote_service/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/07/windows_restart_remote_service/</guid><description>&lt;p>Windows如何方便的重启远程服务器里的服务，在不使用远程连接的情况下？&lt;/p>
&lt;p>注意：服务(名称：service-name)已在远程机器上创建。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在本机新建&lt;code>映射网络驱动器&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开映射好的文件夹，在其中添加&lt;code>bat&lt;/code>和&lt;code>ps1&lt;/code>文件:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>restart.bat&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bat" data-lang="bat">&lt;span style="display:flex;">&lt;span>@&lt;span style="color:#66d9ef">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#ae81ff">%%&lt;/span>i &lt;span style="color:#66d9ef">in&lt;/span> (service-name) &lt;span style="color:#66d9ef">do&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> the service &amp;#39;&lt;span style="color:#ae81ff">%%&lt;/span>i&amp;#39; is being starting...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sc query &lt;span style="color:#ae81ff">%%&lt;/span>i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> net stop &lt;span style="color:#ae81ff">%%&lt;/span>i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> net start &lt;span style="color:#ae81ff">%%&lt;/span>i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sc query &lt;span style="color:#ae81ff">%%&lt;/span>i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> service &amp;#39;&lt;span style="color:#ae81ff">%%&lt;/span>i&amp;#39; started.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pause&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>错误的定义和返回</title><link>https://donnol.github.io/posts/2023/07/error/</link><pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/07/error/</guid><description>&lt;p>错误的定义和返回&lt;/p>
&lt;h3 id="错误的定义">
 错误的定义
 &lt;a class="anchor" href="#%e9%94%99%e8%af%af%e7%9a%84%e5%ae%9a%e4%b9%89">#&lt;/a>
&lt;/h3>
&lt;p>错误粒度：太细则既多又杂，太宽则毫无意义。&lt;/p>
&lt;p>个人觉得一般需要的错误有以下：正常、参数错误、业务错误、内部错误、返回错误。业务错误又有：无权限、处理超时、无记录、已经存在。&lt;/p>
&lt;p>可参照
 &lt;a href="https://grpc.github.io/grpc/core/md_doc_statuscodes.html">&lt;code>GRPC&lt;/code>的实现&lt;/a>。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">Code&lt;/th>
 &lt;th style="text-align: left">Number&lt;/th>
 &lt;th style="text-align: left">Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">OK&lt;/td>
 &lt;td style="text-align: left">0&lt;/td>
 &lt;td style="text-align: left">Not an error; returned on success.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">CANCELLED&lt;/td>
 &lt;td style="text-align: left">1&lt;/td>
 &lt;td style="text-align: left">The operation was cancelled, typically by the caller.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">UNKNOWN&lt;/td>
 &lt;td style="text-align: left">2&lt;/td>
 &lt;td style="text-align: left">Unknown error. For example, this error may be returned when a Status value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">INVALID_ARGUMENT&lt;/td>
 &lt;td style="text-align: left">3&lt;/td>
 &lt;td style="text-align: left">The client specified an invalid argument. Note that this differs from FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name).&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">DEADLINE_EXCEEDED&lt;/td>
 &lt;td style="text-align: left">4&lt;/td>
 &lt;td style="text-align: left">The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">NOT_FOUND&lt;/td>
 &lt;td style="text-align: left">5&lt;/td>
 &lt;td style="text-align: left">Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, NOT_FOUND may be used. If a request is denied for some users within a class of users, such as user-based access control, PERMISSION_DENIED must be used.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">ALREADY_EXISTS&lt;/td>
 &lt;td style="text-align: left">6&lt;/td>
 &lt;td style="text-align: left">The entity that a client attempted to create (e.g., file or directory) already exists.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">PERMISSION_DENIED&lt;/td>
 &lt;td style="text-align: left">7&lt;/td>
 &lt;td style="text-align: left">The caller does not have permission to execute the specified operation. PERMISSION_DENIED must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED instead for those errors). PERMISSION_DENIED must not be used if the caller can not be identified (use UNAUTHENTICATED instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">RESOURCE_EXHAUSTED&lt;/td>
 &lt;td style="text-align: left">8&lt;/td>
 &lt;td style="text-align: left">Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">FAILED_PRECONDITION&lt;/td>
 &lt;td style="text-align: left">9&lt;/td>
 &lt;td style="text-align: left">The operation was rejected because the system is not in a state required for the operation&amp;rsquo;s execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE: (a) Use UNAVAILABLE if the client can retry just the failing call. (b) Use ABORTED if the client should retry at a higher level (e.g., when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence). (c) Use FAILED_PRECONDITION if the client should not retry until the system state has been explicitly fixed. E.g., if an &amp;ldquo;rmdir&amp;rdquo; fails because the directory is non-empty, FAILED_PRECONDITION should be returned since the client should not retry unless the files are deleted from the directory.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">ABORTED&lt;/td>
 &lt;td style="text-align: left">10&lt;/td>
 &lt;td style="text-align: left">The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">OUT_OF_RANGE&lt;/td>
 &lt;td style="text-align: left">11&lt;/td>
 &lt;td style="text-align: left">The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate INVALID_ARGUMENT if asked to read at an offset that is not in the range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from an offset past the current file size. There is a fair bit of overlap between FAILED_PRECONDITION and OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error) when it applies so that callers who are iterating through a space can easily look for an OUT_OF_RANGE error to detect when they are done.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">UNIMPLEMENTED&lt;/td>
 &lt;td style="text-align: left">12&lt;/td>
 &lt;td style="text-align: left">The operation is not implemented or is not supported/enabled in this service.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">INTERNAL&lt;/td>
 &lt;td style="text-align: left">13&lt;/td>
 &lt;td style="text-align: left">Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">UNAVAILABLE&lt;/td>
 &lt;td style="text-align: left">14&lt;/td>
 &lt;td style="text-align: left">The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">DATA_LOSS&lt;/td>
 &lt;td style="text-align: left">15&lt;/td>
 &lt;td style="text-align: left">Unrecoverable data loss or corruption.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">UNAUTHENTICATED&lt;/td>
 &lt;td style="text-align: left">16&lt;/td>
 &lt;td style="text-align: left">The request does not have valid authentication credentials for the operation.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>实现时，错误码范围控制在0&lt;del>255，将0&lt;/del>35留作预定义错误码，36~255留作自定义错误码。&lt;/p></description></item><item><title>Prometheus start failed</title><link>https://donnol.github.io/posts/2023/07/prometheus/</link><pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/07/prometheus/</guid><description>&lt;h2 id="question">
 Question
 &lt;a class="anchor" href="#question">#&lt;/a>
&lt;/h2>
&lt;p>prometheus start failed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.871Z caller&lt;span style="color:#f92672">=&lt;/span>repair.go:57 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>tsdb msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Found healthy block&amp;#34;&lt;/span> mint&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1688493607159&lt;/span> maxt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1688515200000&lt;/span> ulid&lt;span style="color:#f92672">=&lt;/span>01H4J6TB6NCBZFNR9XZ1R2P67H
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.871Z caller&lt;span style="color:#f92672">=&lt;/span>repair.go:57 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>tsdb msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Found healthy block&amp;#34;&lt;/span> mint&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1688529607159&lt;/span> maxt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1688536800000&lt;/span> ulid&lt;span style="color:#f92672">=&lt;/span>01H4JDM4YR6J3TJVBY6P6EGZS4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>repair.go:57 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>tsdb msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Found healthy block&amp;#34;&lt;/span> mint&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1688536807159&lt;/span> maxt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1688544000000&lt;/span> ulid&lt;span style="color:#f92672">=&lt;/span>01H4JMFGKWY1MAM7GBFDQ89FRV
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:696 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stopping scrape discovery manager...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:710 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stopping notify discovery manager...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:732 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stopping scrape manager...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>manager.go:946 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rule manager&amp;#34;&lt;/span> msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stopping rule manager...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>manager.go:956 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rule manager&amp;#34;&lt;/span> msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Rule manager stopped&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>notifier.go:601 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>notifier msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Stopping notification manager...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:726 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Scrape manager stopped&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:692 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Scrape discovery manager stopped&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:907 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Notifier manager stopped&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:706 level&lt;span style="color:#f92672">=&lt;/span>info msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Notify discovery manager stopped&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>tls_config.go:195 level&lt;span style="color:#f92672">=&lt;/span>info component&lt;span style="color:#f92672">=&lt;/span>web msg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;TLS is disabled.&amp;#34;&lt;/span> http2&lt;span style="color:#f92672">=&lt;/span>false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ts&lt;span style="color:#f92672">=&lt;/span>2023-07-06T01:34:43.872Z caller&lt;span style="color:#f92672">=&lt;/span>main.go:916 level&lt;span style="color:#f92672">=&lt;/span>error err&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;opening storage failed: get segment range: segments are not sequential&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Compare and Order</title><link>https://donnol.github.io/posts/2023/07/compare_order/</link><pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/07/compare_order/</guid><description>&lt;p>比，争。&lt;/p>
&lt;p>比较，争先。&lt;/p>
&lt;p>拿他与她比，让他与她争。&lt;/p>
&lt;p>做黄雀，做渔翁。&lt;/p>
&lt;p>不比，不争。&lt;/p>
&lt;p>不付出无收获？&lt;/p>
&lt;p>丛林社会，谈何付出，谈何收获。&lt;/p>
&lt;p>有付出也无收获。&lt;/p></description></item><item><title>ml sklearn</title><link>https://donnol.github.io/posts/2023/06/sklearn/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/sklearn/</guid><description>&lt;h2 id="尝试">
 尝试
 &lt;a class="anchor" href="#%e5%b0%9d%e8%af%95">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ pip install scikit-learn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python3.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; from sklearn.datasets import load_iris
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; from sklearn.linear_model import LogisticRegression
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; data, y &lt;span style="color:#f92672">=&lt;/span> load_iris&lt;span style="color:#f92672">(&lt;/span>return_X_y&lt;span style="color:#f92672">=&lt;/span>True&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; clf &lt;span style="color:#f92672">=&lt;/span> LogisticRegression&lt;span style="color:#f92672">(&lt;/span>random_state&lt;span style="color:#f92672">=&lt;/span>0, max_iter&lt;span style="color:#f92672">=&lt;/span>1000&lt;span style="color:#f92672">)&lt;/span>.fit&lt;span style="color:#f92672">(&lt;/span>data, y&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; clf.predict&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">[&lt;/span>:2, :&lt;span style="color:#f92672">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; clf.predict_proba&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">[&lt;/span>:2, :&lt;span style="color:#f92672">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; clf.score&lt;span style="color:#f92672">(&lt;/span>data, y&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>windows route</title><link>https://donnol.github.io/posts/2023/06/route/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/route/</guid><description>&lt;h2 id="windows通过route命令配置路由">
 &lt;code>Windows&lt;/code>通过&lt;code>route&lt;/code>命令配置路由
 &lt;a class="anchor" href="#windows%e9%80%9a%e8%bf%87route%e5%91%bd%e4%bb%a4%e9%85%8d%e7%bd%ae%e8%b7%af%e7%94%b1">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>route add 192.168.0.0 mask 255.255.0.0 192.168.66.254 -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>192.168.0.0: 目标主机的网络地址&lt;/p>
&lt;p>mask 255.255.0.0: 掩码，与目标网络地址对应&lt;/p>
&lt;p>192.168.66.254: 网关地址&lt;/p>
&lt;/blockquote>
&lt;h2 id="linux通过ip-route命令配置路由">
 &lt;code>Linux&lt;/code>通过&lt;code>ip route&lt;/code>命令配置路由
 &lt;a class="anchor" href="#linux%e9%80%9a%e8%bf%87ip-route%e5%91%bd%e4%bb%a4%e9%85%8d%e7%bd%ae%e8%b7%af%e7%94%b1">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>NOTE&lt;/strong>: &lt;code>ip route&lt;/code>是&lt;code>route&lt;/code>命令的升级版本，但route命令仍在大量使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置192.168.4.0网段的网关为192.168.166.1,数据走wlan0接口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># /24 is the network prefix. The network prefix is the number of enabled bits in the subnet mask.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 24位子网掩码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip route add 192.168.4.0/24 via 192.168.166.1 dev wlan0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 255.255.255.0为子网掩码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 3*8(255即是8位二进制)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip route add 192.168.0.0/255.255.255.0 dev eth0
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>wsl2初始化Mysql数据库速度非常慢</title><link>https://donnol.github.io/posts/2023/06/wsl2/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/wsl2/</guid><description>&lt;h2 id="wsl2版本">
 wsl2版本
 &lt;a class="anchor" href="#wsl2%e7%89%88%e6%9c%ac">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&amp;gt; wsl.exe -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WSL version: 1.2.5.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kernel version: 5.15.90.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WSLg version: 1.0.51
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MSRDC version: 1.2.3770
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Direct3D version: 1.608.2-61064218
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DXCore version: 10.0.25131.1002-220531-1700.rs-onecore-base2-hyp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Windows version: 10.0.19045.3031
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用过程中，因为磁盘空间问题，把子系统安装位置从&lt;code>C盘&lt;/code>转移到了其它盘。&lt;/p>
&lt;h2 id="操作">
 操作
 &lt;a class="anchor" href="#%e6%93%8d%e4%bd%9c">#&lt;/a>
&lt;/h2>
&lt;p>把&lt;code>sql&lt;/code>目录里的&lt;code>*.sql&lt;/code>文件逐一导入到&lt;code>8.0.33&lt;/code>版本的&lt;code>Mysql&lt;/code>。&lt;/p>
&lt;p>尽管&lt;code>sql&lt;/code>文件不多也不大，但是整个过程非常慢。其中一个有一千个左右的&lt;code>INSERT IGNORE&lt;/code>语句，更是用了将近12分钟才完成。&lt;/p>
&lt;h2 id="怎么办">
 怎么办？
 &lt;a class="anchor" href="#%e6%80%8e%e4%b9%88%e5%8a%9e">#&lt;/a>
&lt;/h2>
&lt;p>改为通过网络访问本机的数据库。&lt;/p></description></item><item><title>flutter Widget Element</title><link>https://donnol.github.io/posts/2023/05/flutter_widget_element/</link><pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/05/flutter_widget_element/</guid><description>&lt;h2 id="element">
 Element
 &lt;a class="anchor" href="#element">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dart" data-lang="dart">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Element&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> DiagnosticableTree &lt;span style="color:#66d9ef">implements&lt;/span> BuildContext
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>package:flutter/src/widgets/framework.dart&lt;/p>
&lt;p>An instantiation of a [Widget] at a particular location in the tree.
&amp;ndash; 在树里的特定位置上的一个&lt;code>Widget&lt;/code>的实例。&lt;/p>
&lt;p>Widgets describe how to configure a subtree but the same widget can be used to configure multiple subtrees simultaneously because widgets are immutable. An [Element] represents the use of a widget to configure a specific location in the tree. Over time, the widget associated with a given element can change, for example, if the parent widget rebuilds and creates a new widget for this location.
&amp;ndash; &lt;code>Widget&lt;/code>描述了如何配置一棵子树，但同一个&lt;code>Widget&lt;/code>可以被用来配置多棵相似的子树，因为&lt;code>Widget&lt;/code>是不可变的。一个&lt;code>Element&lt;/code>代表了一个&lt;code>Widget&lt;/code>配置在树里的特定位置的使用。随着时间变化，每个&lt;code>Widget&lt;/code>与一个可以改变的&lt;code>Element&lt;/code>关联。&lt;/p></description></item><item><title>mysqlrouter使用</title><link>https://donnol.github.io/posts/2023/05/mysqlrouter/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/05/mysqlrouter/</guid><description>&lt;h2 id="what">
 What
 &lt;a class="anchor" href="#what">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>mysqlrouter&lt;/code>是一个代理，可以将查询转发到配置好的数据库服务里。&lt;/p>
&lt;h2 id="why">
 Why
 &lt;a class="anchor" href="#why">#&lt;/a>
&lt;/h2>
&lt;p>在办公室网络环境下基于&lt;code>win10 wsl2&lt;/code>开发应用时，需要连接到主机所在局域网的其它机器上的数据库服务。&lt;/p>
&lt;blockquote>
&lt;p>也就是说，存在机器：wsl2、主机、其它机器。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>wsl2&lt;/code>通过&lt;code>NAT&lt;/code>网络模式与&lt;code>主机&lt;/code>互通，并且&lt;code>wsl2&lt;/code>可以访问外网。&lt;/p>
&lt;p>但是&lt;code>wsl2&lt;/code>不能访问到&lt;code>其它机器&lt;/code>上的数据库服务，不知道是不是办公室网络环境存在限制。&lt;/p>
&lt;p>为了使得&lt;code>wsl2&lt;/code>能访问到&lt;code>其它机器&lt;/code>上的数据库服务成立，在&lt;code>主机&lt;/code>启动&lt;code>mysqlrouter&lt;/code>充当代理，然后&lt;code>wsl2&lt;/code>通过访问代理来访问&lt;code>其它机器&lt;/code>。&lt;/p>
&lt;h2 id="install">
 Install
 &lt;a class="anchor" href="#install">#&lt;/a>
&lt;/h2>
&lt;p>可以使用&lt;code>mysql installer&lt;/code>选择安装。&lt;/p>
&lt;h2 id="简单模式">
 简单模式
 &lt;a class="anchor" href="#%e7%ae%80%e5%8d%95%e6%a8%a1%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;p>配置文件（mysqlrouter.conf）：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-config" data-lang="config">[DEFAULT]
logging_folder = D:/Data/mysqlrouter/log
plugin_folder = C:/Program Files/MySQL/MySQL Router 8.0/lib # 这里是插件所在目录，必须是mysqlrouter安装路径下的目录，否则报错找不到插件
config_folder = D:/Data/mysqlrouter/etc # 启动配置默认查找目录，会在目录里寻找mysqlrouter.conf文件
runtime_folder = D:/Data/mysqlrouter/run
data_folder = D:/Data/mysqlrouter/data

[logger]
level = DEBUG

[routing:primary]
bind_address=172.20.96.1 # 主机ip地址
bind_port=6446 # 主机监听端口
destinations = 172.17.39.239:3306 # 目标机器，也就是实际执行查询的数据库服务所在机器的地址
mode = read-write
connect_timeout = 10
&lt;/code>&lt;/pr</description></item><item><title>NATS</title><link>https://donnol.github.io/posts/2023/04/nats/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/04/nats/</guid><description>&lt;h2 id="是什么">
 是什么？
 &lt;a class="anchor" href="#%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://nats.io/about/">Home&lt;/a>, 
 &lt;a href="https://github.com/nats-io/nats-server">Github&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>NATS 是一个简单、安全和高性能的通信系统，适用于数字系统、服务和设备。&lt;/p>
&lt;p>NATS 是一种允许以消息形式分段的数据交换的基础架构。&lt;/p>
&lt;/blockquote>
&lt;h3 id="基于主题">
 基于主题
 &lt;a class="anchor" href="#%e5%9f%ba%e4%ba%8e%e4%b8%bb%e9%a2%98">#&lt;/a>
&lt;/h3>
&lt;p>发布者将消息发到主题；订阅者订阅主题，在有消息到来时消费该消息。&lt;/p>
&lt;blockquote>
&lt;p>主题命名规则：&lt;/p>
&lt;p>基本字符：a to z, A to Z and 0 to 9 (区分大小写，不能包含空白字符).&lt;/p>
&lt;p>特殊字符: &lt;code>.&lt;/code> (分割符，分割不同部分，每部分视为一个token)； * 和 &amp;gt; (通配符，*表示匹配一个token，&amp;gt;表示匹配一或多个token).&lt;/p>
&lt;p>保留主题名称: 以 $ 开头的用在系统内部 (如：$SYS, $JS, $KV &amp;hellip;)&lt;/p></description></item><item><title>Go Generic Join</title><link>https://donnol.github.io/posts/2023/01/go_generic_join/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/01/go_generic_join/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NestedJoin like nested loop join
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NestedJoin&lt;/span>[&lt;span style="color:#a6e22e">J&lt;/span>, &lt;span style="color:#a6e22e">K&lt;/span>, &lt;span style="color:#a6e22e">R&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>](
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">left&lt;/span> []&lt;span style="color:#a6e22e">J&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">right&lt;/span> []&lt;span style="color:#a6e22e">K&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">match&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">J&lt;/span>, &lt;span style="color:#a6e22e">K&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">mapper&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">J&lt;/span>, &lt;span style="color:#a6e22e">K&lt;/span>) &lt;span style="color:#a6e22e">R&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) []&lt;span style="color:#a6e22e">R&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> = make([]&lt;span style="color:#a6e22e">R&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">left&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">right&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">match&lt;/span>(&lt;span style="color:#a6e22e">j&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">r&lt;/span> = append(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">mapper&lt;/span>(&lt;span style="color:#a6e22e">j&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// HashJoin like hash join
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">HashJoin&lt;/span>[&lt;span style="color:#a6e22e">K&lt;/span> &lt;span style="color:#a6e22e">comparable&lt;/span>, &lt;span style="color:#a6e22e">LE&lt;/span>, &lt;span style="color:#a6e22e">RE&lt;/span>, &lt;span style="color:#a6e22e">R&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>](
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">left&lt;/span> []&lt;span style="color:#a6e22e">LE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">right&lt;/span> []&lt;span style="color:#a6e22e">RE&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">lk&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">LE&lt;/span>) &lt;span style="color:#a6e22e">K&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">rk&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">RE&lt;/span>) &lt;span style="color:#a6e22e">K&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">mapper&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">LE&lt;/span>, &lt;span style="color:#a6e22e">RE&lt;/span>) &lt;span style="color:#a6e22e">R&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) []&lt;span style="color:#a6e22e">R&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span> = make([]&lt;span style="color:#a6e22e">R&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">left&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">rm&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">KeyBy&lt;/span>(&lt;span style="color:#a6e22e">right&lt;/span>, &lt;span style="color:#a6e22e">rk&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">le&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">lk&lt;/span>(&lt;span style="color:#a6e22e">le&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">re&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rm&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">r&lt;/span> = append(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">mapper&lt;/span>(&lt;span style="color:#a6e22e">le&lt;/span>, &lt;span style="color:#a6e22e">re&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Jump Table</title><link>https://donnol.github.io/posts/2022/07/jump_table/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/07/jump_table/</guid><description>&lt;h2 id="whats-jump-table">
 What&amp;rsquo;s Jump Table?
 &lt;a class="anchor" href="#whats-jump-table">#&lt;/a>
&lt;/h2>
&lt;p>A jump table can be either &lt;code>an array of pointers to functions&lt;/code> or &lt;code>an array of machine code jump instructions&lt;/code>. If you have &lt;strong>a relatively static set of functions&lt;/strong> (such as system calls or virtual functions for a class) then you can create this table once and call the functions using a simple index into the array. This would mean retrieving the pointer and calling a function or jumping to the machine code depending on the type of table used.&lt;/p></description></item><item><title>数字计算之分摊</title><link>https://donnol.github.io/posts/2022/07/number_calculate/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/07/number_calculate/</guid><description>&lt;p>背景：分多次把一批货全部出清。&lt;/p>
&lt;p>要求：需要确保这批货多次出清跟一次出清收的钱一样。&lt;/p>
&lt;p>现有三个数字(可整数，可小数)：a b c，其中：a 为数量，b 为价格，c 为折扣。&lt;/p>
&lt;p>则总额为: t, &lt;code>t = a*b*c&lt;/code>&lt;/p>
&lt;p>假设分三次，每次数量为：a1 a2 a3，则有：a = a1 + a2 + a3&lt;/p>
&lt;ol>
&lt;li>直接计算：&lt;/li>
&lt;/ol>
&lt;p>第 1 次.&lt;/p>
&lt;pre tabindex="0">&lt;code>a1*b*c
&lt;/code>&lt;/pre>&lt;p>第 2 次.&lt;/p>
&lt;pre tabindex="0">&lt;code>a2*b*c
&lt;/code>&lt;/pre>&lt;p>第 3 次.&lt;/p>
&lt;pre tabindex="0">&lt;code>a3*b*c
&lt;/code>&lt;/pre>&lt;p>(a1+a2+a3)&lt;em>b&lt;/em>c 不就等于 a&lt;em>b&lt;/em>c 了吗？&lt;/p>
&lt;p>但是，如果考虑到小数乘法计算时的精度，比如：1.22*2.33 相乘后再取精度（保留两位小数），不就会导致数量误差了吗？&lt;/p>
&lt;p>那如果取精度导致结果误差，那我不取精度，直接用所有小数位数来计算呢。&lt;/p>
&lt;p>虽说可以，但小数位数是有可能非常多的，占用的空间也是一笔不小的开销。&lt;/p>
&lt;ol start="2">
&lt;li>引入中间量(可称为&amp;rsquo;余额&amp;rsquo;): x y z&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>x = a
y = x*b
z = y*c
&lt;/code>&lt;/pr</description></item><item><title>泛型</title><link>https://donnol.github.io/posts/2022/05/generic/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/generic/</guid><description>&lt;h1 id="泛型">
 泛型
 &lt;a class="anchor" href="#%e6%b3%9b%e5%9e%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="是什么">
 是什么？
 &lt;a class="anchor" href="#%e6%98%af%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h2>
&lt;p>Type parameter, 类型参数。&lt;code>func Add[T Number](x, y T) (r T)&lt;/code>，其中的&lt;code>T&lt;/code>就是类型参数，它被接口&lt;code>Number&lt;/code>所约束。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Number&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> | &lt;span style="color:#66d9ef">float32&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用方除了可自行决定参数值之外，还可以自行决定参数类型。&lt;code>Add[int](1, 2)&lt;/code>，在调用时指定&lt;code>T&lt;/code>的类型为&lt;code>int&lt;/code>，同时传入参数值&lt;code>1&lt;/code>,&lt;code>2&lt;/code>必须是&lt;code>int&lt;/code>类型。&lt;/p>
&lt;p>这样使得代码更灵活，更有扩展性，同时更安全。&lt;/p>
&lt;h2 id="go泛型">
 Go泛型
 &lt;a class="anchor" href="#go%e6%b3%9b%e5%9e%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="为什么">
 为什么？
 &lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88">#&lt;/a>
&lt;/h3>
&lt;p>静态语言，类型固定，比如这个函数：&lt;code>func Add(x, y int) int&lt;/code>就要求参数和结果都必须是整型。&lt;/p></description></item><item><title>Find out which Go version built your binary</title><link>https://donnol.github.io/posts/2022/05/find_go_version_the_app_use/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/find_go_version_the_app_use/</guid><description>&lt;h1 id="根据二进制文件找出应用构建时使用的go版本">
 根据二进制文件找出应用构建时使用的&lt;code>Go&lt;/code>版本
 &lt;a class="anchor" href="#%e6%a0%b9%e6%8d%ae%e4%ba%8c%e8%bf%9b%e5%88%b6%e6%96%87%e4%bb%b6%e6%89%be%e5%87%ba%e5%ba%94%e7%94%a8%e6%9e%84%e5%bb%ba%e6%97%b6%e4%bd%bf%e7%94%a8%e7%9a%84go%e7%89%88%e6%9c%ac">#&lt;/a>
&lt;/h1>
&lt;p>使用
 &lt;a href="https://github.com/go-delve/delve/blob/master/Documentation/installation">&lt;code>dlv&lt;/code>&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>dlv exec ./app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; p runtime.buildVerion
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者，在代码里调用&lt;code>runtime.Version()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;go version:&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">Version&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
 &lt;a href="https://dave.cheney.net/2017/06/20/how-to-find-out-which-go-version-built-your-binary">参照&lt;/a>&lt;/p></description></item><item><title>k8s是怎么维持pod的运行的呢？</title><link>https://donnol.github.io/posts/2022/05/k8s_how_to_keep_pods/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/k8s_how_to_keep_pods/</guid><description>&lt;h1 id="k8s是怎么维持pod的运行的呢">
 k8s是怎么维持pod的运行的呢？
 &lt;a class="anchor" href="#k8s%e6%98%af%e6%80%8e%e4%b9%88%e7%bb%b4%e6%8c%81pod%e7%9a%84%e8%bf%90%e8%a1%8c%e7%9a%84%e5%91%a2">#&lt;/a>
&lt;/h1>
&lt;p>当接收了yaml配置的信息后，是怎么维持pod根据声明一直运行的呢？&lt;/p>
&lt;p>让我们沿着命令执行的过程来一睹为快：&lt;code>kubectl apply -f pod.yaml&lt;/code>.&lt;/p>
&lt;p>源码位置：&lt;code>cmd/kubectl/kubectl.go&lt;/code> -&amp;gt; &lt;code>staging/src/k8s.io/kubectl/pkg/cmd/cmd.go&lt;/code> -&amp;gt; &lt;code>staging/src/k8s.io/kubectl/pkg/cmd/apply/apply.go&lt;/code>&lt;/p>
&lt;p>最终的执行方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ApplyOptions&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 预处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">PreProcessorFn&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Running apply pre-processor function&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">PreProcessorFn&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Enforce CLI specified namespace on server request.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">EnforceNamespace&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">VisitedNamespaces&lt;/span>.&lt;span style="color:#a6e22e">Insert&lt;/span>(&lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">Namespace&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Generates the objects using the resource builder if they have not
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// already been stored by calling &amp;#34;SetObjects()&amp;#34; in the pre-processor.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">errs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">error&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">infos&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">GetObjects&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">errs&lt;/span> = append(&lt;span style="color:#a6e22e">errs&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">infos&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> len(&lt;span style="color:#a6e22e">errs&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no objects passed to apply&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Iterate through all objects, applying each one.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">info&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">infos&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">applyOneObject&lt;/span>(&lt;span style="color:#a6e22e">info&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">errs&lt;/span> = append(&lt;span style="color:#a6e22e">errs&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// If any errors occurred during apply, then return error (or
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// aggregate of errors).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">errs&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errs&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">errs&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">utilerrors&lt;/span>.&lt;span style="color:#a6e22e">NewAggregate&lt;/span>(&lt;span style="color:#a6e22e">errs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">PostProcessorFn&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">klog&lt;/span>.&lt;span style="color:#a6e22e">V&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>).&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Running apply post-processor function&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">PostProcessorFn&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// applyOneObject里会调用以下方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Helper&lt;/span>) &lt;span style="color:#a6e22e">Patch&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">pt&lt;/span> &lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">PatchType&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">PatchOptions&lt;/span>) (&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">Object&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">options&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">PatchOptions&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">ServerDryRun&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">DryRun&lt;/span> = []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">DryRunAll&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">FieldManager&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">FieldManager&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">FieldManager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">FieldValidation&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">FieldValidation&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">FieldValidation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">RESTClient&lt;/span>.&lt;span style="color:#a6e22e">Patch&lt;/span>(&lt;span style="color:#a6e22e">pt&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">NamespaceIfScoped&lt;/span>(&lt;span style="color:#a6e22e">namespace&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">NamespaceScoped&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">Resource&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Resource&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">Name&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">SubResource&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">Subresource&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">VersionedParams&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>, &lt;span style="color:#a6e22e">metav1&lt;/span>.&lt;span style="color:#a6e22e">ParameterCodec&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">Body&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>).
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">TODO&lt;/span>()). &lt;span style="color:#75715e">// 调用api，把apply请求发到主节点，记录信息到etcd之后，再创建出相应的pod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">Get&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 那么，接收并处理这个Patch请求的代码在哪里呢？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NewStreamWatcher creates a StreamWatcher from the given decoder.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewStreamWatcher&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#a6e22e">Decoder&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#a6e22e">Reporter&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">StreamWatcher&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">sw&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">StreamWatcher&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">source&lt;/span>: &lt;span style="color:#a6e22e">d&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">reporter&lt;/span>: &lt;span style="color:#a6e22e">r&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// It&amp;#39;s easy for a consumer to add buffering via an extra
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// goroutine/channel, but impossible for them to remove it,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// so nonbuffered is better.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">result&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">Event&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// If the watcher is externally stopped there is no receiver anymore
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// and the send operations on the result channel, especially the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// error reporting might block forever.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// Therefore a dedicated stop channel is used to resolve this blocking.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">done&lt;/span>: make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">sw&lt;/span>.&lt;span style="color:#a6e22e">receive&lt;/span>() &lt;span style="color:#75715e">// 接收请求，然后通过chan发送出去，再由其它代码来处理？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">sw&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// TODO:
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Go enum</title><link>https://donnol.github.io/posts/2022/05/go_enum/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/go_enum/</guid><description>&lt;h1 id="go-enum">
 Go enum
 &lt;a class="anchor" href="#go-enum">#&lt;/a>
&lt;/h1>
&lt;p>Go是没有内置枚举类型的，那么，当需要使用枚举时，该怎么办呢？&lt;/p>
&lt;p>枚举说白了，就是一连串&lt;code>互斥的值&lt;/code>，每个值代表一样事物或一个类型。&lt;/p>
&lt;p>比如，现在需要一个颜色枚举，可以这样定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Red&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Red&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 红色
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Blue&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Blue&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 蓝色
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Green&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;Green&amp;#34;&lt;/span> &lt;span style="color:#75715e">// 绿色
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>Go1.18 comparable</title><link>https://donnol.github.io/posts/2022/04/go1.18_comparable/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/04/go1.18_comparable/</guid><description>&lt;h1 id="go-118-预定义接口类型">
 Go 1.18 预定义接口类型
 &lt;a class="anchor" href="#go-118-%e9%a2%84%e5%ae%9a%e4%b9%89%e6%8e%a5%e5%8f%a3%e7%b1%bb%e5%9e%8b">#&lt;/a>
&lt;/h1>
&lt;p>先看一个提案: 
 &lt;a href="https://github.com/golang/go/issues/51338">proposal: spec: permit values to have type &amp;ldquo;comparable&amp;rdquo;&lt;/a> &amp;ndash; 允许值拥有&lt;code>comparable&lt;/code>类型，我的理解是，现在的&lt;code>comparable&lt;/code>只能用作泛型里的类型参数的约束，不能像普通类型那样使用，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Set&lt;/span>[&lt;span style="color:#a6e22e">E&lt;/span> &lt;span style="color:#a6e22e">comparable&lt;/span>] []&lt;span style="color:#a6e22e">E&lt;/span> &lt;span style="color:#75715e">// 可以用做类型参数的约束
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 使用go1.18编译，报错：interface is (or embeds) comparable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> &lt;span style="color:#a6e22e">comparable&lt;/span> &lt;span style="color:#75715e">// 变量不可以使用`comparable`类型
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>KMP</title><link>https://donnol.github.io/posts/2022/03/kmp/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/03/kmp/</guid><description>&lt;p>KMP字符串匹配算法&lt;/p>
&lt;p>精确匹配&lt;/p>
&lt;p>状态机&lt;/p>
&lt;p>给定一个pattern，查找其在另一字符串s出现的最早位置。（找不到则返回-1）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">pattern&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>状态推移&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">index&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">pattern&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">pattern&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据pattern构造dp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">dp&lt;/span> [&lt;span style="color:#a6e22e">n&lt;/span>][&lt;span style="color:#a6e22e">m&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 在s上应用dp，判断pattern位置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>霜之哀伤</title><link>https://donnol.github.io/posts/2022/02/%E9%9C%9C%E4%B9%8B%E5%93%80%E4%BC%A4/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/%E9%9C%9C%E4%B9%8B%E5%93%80%E4%BC%A4/</guid><description>&lt;p>当有人说要在屋里开个窗，一定惹得大伙不开心，无人同意；若要在屋里凿个洞，就有人来协调，愿意开窗了。&lt;/p>
&lt;p>看到了吗？这里面有提议的人，有反对的人，有开始反对后面协调的人。看似只有这几种人，实则还有一种人，哪边人多站哪边。恶则落井下石，善则“好言相劝”。&lt;/p>
&lt;p>一盆散沙，就算反对，也难以“碍事”。聪明人早就明白这个道理。只要能裹挟着一群人，与自己利益捆绑，那么就能为己所用。至于“所用”是何物，自然无关紧要，只要“为己”即可。&lt;/p>
&lt;p>同样地，要击溃捆绑，自然需要强大的力量，也就是另一群人。&lt;/p></description></item><item><title>goroutine vs tokio</title><link>https://donnol.github.io/posts/2022/02/goroutine_vs_tokio/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/goroutine_vs_tokio/</guid><description>&lt;p>
 &lt;a href="https://www.reddit.com/r/rust/comments/lg0a7b/benchmarking_tokio_tasks_and_goroutines/">Reddit讨论贴&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Go uses a different strategy for blocking systemcalls. It does not run them on a threadpool - it moves all the other goroutines that are queued to run on the current thread to a new worker thread, then runs the blocking systemcall on the current thread. &lt;strong>This minimizes context switching&lt;/strong>.&lt;/p>
&lt;p>You can do this in tokio as well, using &lt;strong>task::block_in_place&lt;/strong>. If I change your code to use that instead of tokio::fs, it gets a lot closer to the go numbers. Note that using block_in_place is not without caveats, and it only works on the multi-threaded runtime, not the single-threaded one. That&amp;rsquo;s why it&amp;rsquo;s not used in the implementation of tokio::fs.&lt;/p></description></item><item><title>go runtime chan</title><link>https://donnol.github.io/posts/2022/02/go_runtime_chan/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/go_runtime_chan/</guid><description>&lt;p>&lt;code>src/runtime/chan.go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Invariants:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// At least one of c.sendq and c.recvq is empty,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// except for the case of an unbuffered channel with a single goroutine
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// blocked on it for both sending and receiving using a select statement,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// in which case the length of c.sendq and c.recvq is limited only by the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// size of the select statement.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// For buffered channels, also:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// c.qcount &amp;gt; 0 implies that c.recvq is empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// c.qcount &amp;lt; c.dataqsiz implies that c.sendq is empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 在文件开头，说明了几个不变量：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// c.sendq和c.recvq中至少有一个是空的，
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 除非，一个无缓冲管道在一个goroutine里阻塞了，这个管道的发送和接收都使用了一个select语句，这时
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// c.sendq和c.recvq的长度被select语句限制。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 对于缓冲管道，同样地：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// c.qcount &amp;gt; 0 表明c.recvq是空的。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// c.qcount &amp;lt; c.dataqsiz 表明c.sendq是空的。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 实际的chan类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">hchan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">qcount&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// total data in the queue - 队列里的数据总数量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">dataqsiz&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// size of the circular queue - 循环队列的大小，make时传进来的值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// points to an array of dataqsiz elements - dataqsiz元素组成的数组的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">elemsize&lt;/span> &lt;span style="color:#66d9ef">uint16&lt;/span> &lt;span style="color:#75715e">// 元素大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">closed&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// 是否关闭
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">elemtype&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">_type&lt;/span> &lt;span style="color:#75715e">// element type - 元素类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">sendx&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// send index - 发送索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">recvx&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// receive index - 接收索引
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">recvq&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#75715e">// list of recv waiters - 等待接收者列表，表明这个管道的接收者；一个链表，里面的每个元素代表一个g；
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">sendq&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#75715e">// list of send waiters - 等待发送者列表，编码这个管道的发送者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// lock protects all fields in hchan, as well as several
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// fields in sudogs blocked on this channel.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// Do not change another G&amp;#39;s status while holding this lock
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// (in particular, do not ready a G), as this can deadlock
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// with stack shrinking.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#a6e22e">mutex&lt;/span> &lt;span style="color:#75715e">// 保护chan里的所有字段，以及阻塞在本管道里的sudog；当持有这个锁时，不要改变其它G的状态，因为在栈收缩时可能引起死锁。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">last&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// sudog represents a g in a wait list, such as for sending/receiving
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// on a channel. - 代表了一个在等待列表的g
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// sudog is necessary because the g ↔ synchronization object relation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// is many-to-many. A g can be on many wait lists, so there may be
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// many sudogs for one g; and many gs may be waiting on the same
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// synchronization object, so there may be many sudogs for one object.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - sudog是必须的，因为g和同步对象关系是多对多。一个g可以在多个等待列表里，因此一个g对应有多个sudog；
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 多个g可以等待同一个同步对象，因此一个对象会对应多个sudog。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// sudogs are allocated from a special pool. Use acquireSudog and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// releaseSudog to allocate and free them.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// - sudog从一个特殊池子里分配，使用acquireSudog分配和releaseSudog释放它们。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// The following fields are protected by the hchan.lock of the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// channel this sudog is blocking on. shrinkstack depends on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// this for sudogs involved in channel ops.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// - 以下字段由hchan.lock来保护。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#75715e">// 代表的g
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// 链表中的下一个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">prev&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// 链表中的上一个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// data element (may point to stack) - 数据元素，可能是指向栈的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// The following fields are never accessed concurrently.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// For channels, waitlink is only accessed by g.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// For semaphores, all fields (including the ones above)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// are only accessed when holding a semaRoot lock.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// - 以下字段永远不会被并发访问。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 对于管道，waitlink只会被g访问。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 对于信号量，所有字段（包括上面的）只有在持有semaRoot锁时才能被访问
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">acquiretime&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// 获取时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">releasetime&lt;/span> &lt;span style="color:#66d9ef">int64&lt;/span> &lt;span style="color:#75715e">// 释放时间
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">ticket&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span> &lt;span style="color:#75715e">// 票据
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// isSelect indicates g is participating in a select, so
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// g.selectDone must be CAS&amp;#39;d to win the wake-up race.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">isSelect&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 表明g是否参与到了一个select里，从而使得g.selectDone必须CAS地去赢得唤醒竞赛
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// success indicates whether communication over channel c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// succeeded. It is true if the goroutine was awoken because a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// value was delivered over channel c, and false if awoken
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// because c was closed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">success&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// 表明管道的通信是否成功了，如果goroutine因为一个值被管道传送到来而唤醒即为成功
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// semaRoot binary tree - 根信号量二叉树
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">waitlink&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// g.waiting list or semaRoot - g的等待列表或semaRoot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">waittail&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span> &lt;span style="color:#75715e">// semaRoot
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span> &lt;span style="color:#75715e">// channel - 所属管道
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 新建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">makechan&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">chantype&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// compiler checks this but be safe.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">16&lt;/span> { &lt;span style="color:#75715e">// 管道的元素大小不能太大
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;makechan: invalid channel element type&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// const hchanSize uintptr = 96
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">hchanSize&lt;/span>&lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#a6e22e">maxAlign&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">align&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">maxAlign&lt;/span> { &lt;span style="color:#75715e">// 对齐检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">throw&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;makechan: bad alignment&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 元素大小乘以管道大小，计算出来所需内存大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">mem&lt;/span>, &lt;span style="color:#a6e22e">overflow&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">MulUintptr&lt;/span>(&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>, uintptr(&lt;span style="color:#a6e22e">size&lt;/span>)) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">overflow&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">mem&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">maxAlloc&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">hchanSize&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		panic(&lt;span style="color:#a6e22e">plainError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;makechan: size out of range&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Hchan does not contain pointers interesting for GC when elements stored in buf do not contain pointers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// buf points into the same allocation, elemtype is persistent.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// SudoG&amp;#39;s are referenced from their owning thread so they can&amp;#39;t be collected.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// TODO(dvyukov,rlh): Rethink when collector can move allocated objects.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">switch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">mem&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// Queue or element size is zero.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">c&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>)(&lt;span style="color:#a6e22e">mallocgc&lt;/span>(&lt;span style="color:#a6e22e">hchanSize&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// Race detector uses this location for synchronization.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">ptrdata&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// Elements do not contain pointers. -- 元素没有包含指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// Allocate hchan and buf in one call.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">c&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>)(&lt;span style="color:#a6e22e">mallocgc&lt;/span>(&lt;span style="color:#a6e22e">hchanSize&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">mem&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span> = &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>), &lt;span style="color:#a6e22e">hchanSize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// Elements contain pointers. -- 元素包含指针
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">c&lt;/span> = new(&lt;span style="color:#a6e22e">hchan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">buf&lt;/span> = &lt;span style="color:#a6e22e">mallocgc&lt;/span>(&lt;span style="color:#a6e22e">mem&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemsize&lt;/span> = uint16(&lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span> = &lt;span style="color:#a6e22e">elem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">dataqsiz&lt;/span> = uint(&lt;span style="color:#a6e22e">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">lockInit&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>, &lt;span style="color:#a6e22e">lockRankHchan&lt;/span>) &lt;span style="color:#75715e">// 初始化锁
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">debugChan&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		print(&lt;span style="color:#e6db74">&amp;#34;makechan: chan=&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;; elemsize=&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;; dataqsiz=&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">size&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 发送
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sendDirect&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">_type&lt;/span>, &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sudog&lt;/span>, &lt;span style="color:#a6e22e">src&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// src is on our stack, dst is a slot on another stack.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// - src是在我们的栈上，dst是另一个栈上的槽
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Once we read sg.elem out of sg, it will no longer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// be updated if the destination&amp;#39;s stack gets copied (shrunk).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// So make sure that no preemption points can happen between read &amp;amp; use.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">dst&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">typeBitsBulkBarrier&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>, uintptr(&lt;span style="color:#a6e22e">dst&lt;/span>), uintptr(&lt;span style="color:#a6e22e">src&lt;/span>), &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// No need for cgo write barrier checks because dst is always
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// Go memory.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">memmove&lt;/span>(&lt;span style="color:#a6e22e">dst&lt;/span>, &lt;span style="color:#a6e22e">src&lt;/span>, &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">size&lt;/span>) &lt;span style="color:#75715e">// 移动src到dst
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 接收 -- 请看源码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 关闭
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">closechan&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		panic(&lt;span style="color:#a6e22e">plainError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;close of nil channel&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">lock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">closed&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> { &lt;span style="color:#75715e">// 已关闭的chan，如果再次关闭会panic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		panic(&lt;span style="color:#a6e22e">plainError&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;close of closed channel&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">raceenabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">callerpc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getcallerpc&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">racewritepc&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>(), &lt;span style="color:#a6e22e">callerpc&lt;/span>, &lt;span style="color:#a6e22e">abi&lt;/span>.&lt;span style="color:#a6e22e">FuncPCABIInternal&lt;/span>(&lt;span style="color:#a6e22e">closechan&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">racerelease&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">closed&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">// 设为关闭
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">glist&lt;/span> &lt;span style="color:#a6e22e">gList&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 先释放接收者，再释放发送者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// release all readers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">recvq&lt;/span>.&lt;span style="color:#a6e22e">dequeue&lt;/span>() &lt;span style="color:#75715e">// 逐个出队sudog
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">typedmemclr&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">elemtype&lt;/span>, &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span>) &lt;span style="color:#75715e">// 清理元素
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>			&lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> = &lt;span style="color:#a6e22e">cputicks&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">param&lt;/span> = &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">sg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">success&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">raceenabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">raceacquireg&lt;/span>(&lt;span style="color:#a6e22e">gp&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">glist&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">gp&lt;/span>) &lt;span style="color:#75715e">// 把关联的g存到glist里
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// release all writers (they will panic)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sendq&lt;/span>.&lt;span style="color:#a6e22e">dequeue&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">elem&lt;/span> = &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">releasetime&lt;/span> = &lt;span style="color:#a6e22e">cputicks&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">g&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">param&lt;/span> = &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">sg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">sg&lt;/span>.&lt;span style="color:#a6e22e">success&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">raceenabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">raceacquireg&lt;/span>(&lt;span style="color:#a6e22e">gp&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raceaddr&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">glist&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">gp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">unlock&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lock&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Ready all Gs now that we&amp;#39;ve dropped the channel lock.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">for&lt;/span> !&lt;span style="color:#a6e22e">glist&lt;/span>.&lt;span style="color:#a6e22e">empty&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">glist&lt;/span>.&lt;span style="color:#a6e22e">pop&lt;/span>() &lt;span style="color:#75715e">// 逐个处理g
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">gp&lt;/span>.&lt;span style="color:#a6e22e">schedlink&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">goready&lt;/span>(&lt;span style="color:#a6e22e">gp&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>) &lt;span style="color:#75715e">// 因为我们已经释放了这些g所关联的chan，所以让这些g进入ready状态，准备运行 -- Mark gp ready to run.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>go work</title><link>https://donnol.github.io/posts/2022/02/go_work/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/go_work/</guid><description>&lt;p>go1.18将要推出&lt;code>workspace&lt;/code>模式，此举是为了方便在本地开发多个不同&lt;code>module&lt;/code>时的依赖管理。&lt;/p>
&lt;p>命令说明：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go help work
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Go workspace provides access to operations on workspaces.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Note that support &lt;span style="color:#66d9ef">for&lt;/span> workspaces is built into many other commands, not
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>just &lt;span style="color:#e6db74">&amp;#39;go work&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>See &lt;span style="color:#e6db74">&amp;#39;go help modules&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> information about Go&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>s module system of which
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>workspaces are a part.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>A workspace is specified by a go.work file that specifies a set of
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>module directories with the &lt;span style="color:#e6db74">&amp;#34;use&amp;#34;&lt;/span> directive. These modules are used as
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>root modules by the go command &lt;span style="color:#66d9ef">for&lt;/span> builds and related operations. A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>workspace that does not specify modules to be used cannot be used to &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>builds from local modules.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go.work files are line-oriented. Each line holds a single directive,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>made up of a keyword followed by arguments. For example:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go 1.18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use ../foo/bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use ./baz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replace example.com/foo v1.2.3 &lt;span style="color:#f92672">=&lt;/span>&amp;gt; example.com/bar v1.4.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The leading keyword can be factored out of adjacent lines to create a block,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>like in Go imports.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use &lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ../foo/bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ./baz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The use directive specifies a module to be included in the workspace&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set of main modules. The argument to the use directive is the directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>containing the module&lt;span style="color:#ae81ff">\&amp;#39;&lt;/span>s go.mod file.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The go directive specifies the version of Go the file was written at. It
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>is possible there may be future changes in the semantics of workspaces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>that could be controlled by this version, but &lt;span style="color:#66d9ef">for&lt;/span> now the version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>specified has no effect.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The replace directive has the same syntax as the replace directive in a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go.mod file and takes precedence over replaces in go.mod files. It is
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>primarily intended to override conflicting replaces in different workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>modules.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>To determine whether the go command is operating in workspace mode, use
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>the &lt;span style="color:#e6db74">&amp;#34;go env GOWORK&amp;#34;&lt;/span> command. This will specify the workspace file being
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go work &amp;lt;command&amp;gt; &lt;span style="color:#f92672">[&lt;/span>arguments&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>The commands are:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> edit edit go.work from tools or scripts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init initialize workspace file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sync sync workspace build list to modules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> use add modules to workspace file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use &lt;span style="color:#e6db74">&amp;#34;go help work &amp;lt;command&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more information about a command.
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>杂念</title><link>https://donnol.github.io/posts/2022/02/distractions/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/distractions/</guid><description>&lt;h2 id="情绪绑定">
 情绪绑定
 &lt;a class="anchor" href="#%e6%83%85%e7%bb%aa%e7%bb%91%e5%ae%9a">#&lt;/a>
&lt;/h2>
&lt;p>先把一样好（好看、好听、好闻）的东西抛出来，收集大众的积极情绪，进而把大家的情绪控制。&lt;/p>
&lt;p>当这样东西喜，你就跟着喜；当这样东西悲，你就跟着悲；当这样东西静，你就跟着静。当这样东西动，你却看不到了。&lt;/p>
&lt;p>信仰缺失的年代，把自己交付给这样的东西，只为换到一丝“慰挤”。&lt;/p>
&lt;p>精神上的追求太难找到共鸣了，不如转而追求物质上的欢喜。每天吃吃喝喝，打打闹闹，不以物喜，不以己悲，不是挺好。&lt;/p>
&lt;p>歌好听，那就听，何必在意歌手爱天怼地。如果真的这么较真，最好听歌前做好背景调查，如果不慎那歌手竟信息不详，那只好叫耳朵过滤掉了。若实在忍不住，也不妨在确实之前先恩施一番，以传我宽大之名。当然，如有丝言片语，只要未到石锤之境，自然轻松忽略。毕竟，真假难辨，不如不辩。&lt;/p>
&lt;p>万一真的发现了黑历史，这时就要斟酌一番了，继续爱如谦，抑或恨如龙，搞不好就被别人发现你居然喜欢“黑”歌手，承担巨大的社会压力，就得不偿失了。&lt;/p>
&lt;p>但是，害怕很难成事，只会坏事。如果只因为怕，那如何能算英雄，或者竟连个孤勇者都算不上，实在于心难安。那何不拉拢一批共同情绪的人，把那位别人先打黑。&lt;/p>
&lt;p>嘿，只需证明别人是错的，何苦花费心思证明自己是对呢！&lt;/p>
&lt;p>嗯，情绪输出总算有着落了，难受的只要是别人，自己就永远开心了，谁管别人是亲是疏，是喜是恶呢。只要不管不顾，虎牛之力也拿我没辙。对别人施暴，哪怕隔着个屏幕，也能爽到嗨。&lt;/p>
&lt;p>别人这时就难受了：我好心劝你们远离毒瘤，居然不识抬举，还要拉帮结派来搞我。真的是越想越气，越气越想。奈何对方人多势众，单拳难敌四手。&lt;/p>
&lt;p>自诩孤高者，自然不屑于群斗，但被逼到墙角了，也不得不群起。但标准越高，规模自然越小，苦费心思，依然难以匹敌，最后只好在&lt;del>猪圈&lt;/del>方圈里丢三骂四了。&lt;/p>
&lt;p>聪明人居然不懂不聪明人的想法，为什么敢自认聪明呢？&lt;/p>
&lt;p>懂的话，大抵不会自称聪明人，而要转称愚人了吧。不聪明人也不真的不聪明，只是知道往身上贴上聪明人标签，更多时候只捞得个劳苦功低、得不偿失，活得还不如马屁精。&lt;/p>
&lt;p>说到马屁精，我就猜到马屁是香的，或至少在喜爱之人闻来别有一番风味。&lt;/p>
&lt;p>马屁精自然是冤枉的，不过说了几句某人爱听的话，或者不小心成了习惯&amp;ndash;见某人说某话，别人就来指责他，并打上马屁精标签，在圈里不断丢三骂四。只是不对你这样说话，你就这么生气，别人真的是坏。&lt;/p>
&lt;p>谁怪你不是某人呢？你若竟是某人，想听几句某话，那还不难。只怕你成了某人，你还嫌少呢！&lt;/p>
&lt;p>马屁精也不全是敌人，是非精、八卦精等“朋友”是大大的有。而且，精的本事也不能小，至少要在亦敌亦友的关系转变中拿捏得准确无误。不然闹出“人门前弄是非，精面前摆事实”的笑话来，就颜面无存了。&lt;/p>
&lt;p>精，未成人之前，或竟不做人，选择做精，自然是如老鼠过街，人人喊打。&lt;/p>
&lt;p>既然是精，那就必须没有情绪，笑脸迎臭脸自然是家常便饭。但只要熬出头，拥有一星半点某人之像，好生活自然而至，竟也开始享受到了某话。&lt;/p>
&lt;p>路漫漫兮，修就是了。怎么修的，你就别管了。好好的丢三骂四还不够，还敢来管修的事，怕不是吃饱了思起淫欲来。&lt;/p>
&lt;p>精在那里，你不骂，你敢往这边看，你怕不是想吃大过年不想吃的饭了。就不怕，我饭都不给你吃，把你饿成精。&lt;/p>
&lt;p>原来精是饿出来的！&lt;/p></description></item><item><title>Rust与安全</title><link>https://donnol.github.io/posts/2022/01/rust_safe/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/rust_safe/</guid><description>&lt;p>有一些东西，做了一些事情。&lt;/p>
&lt;p>有什么东西，做了什么呢？&lt;/p>
&lt;p>有文件、结构体、特征、类型，调用了函数、方法，读了文件/读了body，算了结果，写了文件/答了请求。&lt;/p>
&lt;p>IO or 计算。&lt;/p>
&lt;p>或者说，更强调IO，还是计算。&lt;/p>
&lt;h2 id="内存安全">
 内存安全
 &lt;a class="anchor" href="#%e5%86%85%e5%ad%98%e5%ae%89%e5%85%a8">#&lt;/a>
&lt;/h2>
&lt;h2 id="并发安全">
 并发安全
 &lt;a class="anchor" href="#%e5%b9%b6%e5%8f%91%e5%ae%89%e5%85%a8">#&lt;/a>
&lt;/h2></description></item><item><title>wasm运行时wasmtime</title><link>https://donnol.github.io/posts/2022/01/wasmtime/</link><pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/wasmtime/</guid><description>&lt;h2 id="源码">
 源码
 &lt;a class="anchor" href="#%e6%ba%90%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 下载&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone git@github.com:bytecodealliance/wasmtime.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 子模块&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 安装&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cargo build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果忘了拉子模块，&lt;code>vscode&lt;/code>的&lt;code>rust-analyzer&lt;/code>会报错，导致智能提示等功能失效。&lt;/p>
&lt;p>不过整个初始化过程还是有点长，等了好久才能正常使用。&lt;/p>
&lt;h3 id="阅读">
 阅读
 &lt;a class="anchor" href="#%e9%98%85%e8%af%bb">#&lt;/a>
&lt;/h3>
&lt;p>从&lt;code>build.rs&lt;/code>开始，首先映入眼帘的是&lt;code>use anyhow::Context;&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">/// Provides the `context` method for `Result`.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">/// This trait is sealed and cannot be implemented for types outside of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">/// `anyhow`.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>容器镜像加密</title><link>https://donnol.github.io/posts/2022/01/container_encrypt/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/container_encrypt/</guid><description>&lt;p>如果我在创建镜像时把源码也打包了进去，要怎么防止别人通过这个镜像把源码给窃取了呢？&lt;/p>
&lt;ul>
&lt;li>
&lt;p>加密&lt;/p>
&lt;p>镜像加密&lt;/p>
&lt;p>源码加密：在COPY源码进去之前先加密；这种适合服务器不是自己的，并且在局域网里的（接过医院系统的应该都懂吧）；留这样一份加密源码也只是在方便有bug时可以快速修复的同时，还可以稍微保护一下源码；&lt;/p>
&lt;pre>&lt;code> 先使用zip压缩源码：`zip -q -r code.zip ./code`；
 再使用gpg加密：`gpg --yes --batch --passphrase=123 -c ebpf.zip`； -- 通过`--yes --batch --passphrase`三个选项避免键盘交互，最后生成`ebpf.zip.gpg`。
 后续进入容器后，使用gpg解密：`gpg -o ebpf2.zip -d ebpf.zip.gpg`；
 再使用unzip解压：`unzip -d ebpf2 ebpf2.zip`。
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ul>
&lt;p>在镜像构建后，还要防止&lt;code>docker history -H cb0b42c0cb03 --no-trunc=true&lt;/code>查看镜像构建历史时，泄露秘钥等信息。&amp;ndash; 可使用多阶段构建：在前一阶段使用密钥加密源码，后一阶段复制加密源码，从而避免密钥泄露。因为一般只需要把后一阶段构建出来的镜像分发出去就好了，而查看后一阶段构建出来的镜像的构建历史，是看不到密钥信息的（查看前一阶段的构建历史才会看到）。&lt;/p>
&lt;h2 id="dockerfile-copy-before-mkdir-will-get-a-no-such-file-or-directory-error">
 dockerfile COPY before mkdir will get a &lt;code>no such file or directory&lt;/code> error
 &lt;a class="anchor" href="#dockerfile-copy-before-mkdir-will-get-a-no-such-file-or-directory-error">#&lt;/a>
&lt;/h2>
&lt;p>&lt;del>error:&lt;/del>&lt;/p></description></item><item><title>智能合约</title><link>https://donnol.github.io/posts/2022/01/smart_contract/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/smart_contract/</guid><description>&lt;h2 id="智能合约">
 智能合约
 &lt;a class="anchor" href="#%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://zh.wikipedia.org/wiki/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6">智能合约wiki&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>（英语：Smart contract）是一种特殊协议，在区块链内制定合约时使用，当中内含了代码函数 (Function)，亦能与其他合约进行交互、做决策、存储资料及发送以太币等功能。智能合约主要提供&lt;strong>验证及执行合约内所订立的条件&lt;/strong>。智能合约允许在没有第三方的情况下进行可信交易。这些&lt;strong>交易可追踪且不可逆转&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="安全问题">
 安全问题
 &lt;a class="anchor" href="#%e5%ae%89%e5%85%a8%e9%97%ae%e9%a2%98">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>智能合约是“执行合约条款的计算机交易协议”。区块链上的&lt;strong>所有用户都可以看到&lt;/strong>基于区块链的智能合约。但是，这会导致包括安全漏洞在内的所有漏洞都可见，并且可能无法迅速修复。&lt;/p>
&lt;p>这样的攻击难以迅速解决，例如：&lt;/p>
&lt;blockquote>
&lt;p>2016年6月The DAOEther的漏洞造成损失5000万美元，而开发者试图达成共识的解决方案。DAO的程序在黑客删除资金之前有一段时间的延迟。以太坊软件的一个硬分叉在时限到期之前完成了攻击者的资金回收工作。&lt;/p>
&lt;/blockquote>
&lt;p>以太坊智能合约中的问题包括合约编程Solidity、编译器错误、以太坊虚拟机错误、对区块链网络的攻击、程序错误的不变性以及其他尚无文档记录的攻击。&lt;/p>
&lt;blockquote>
&lt;p>2018年4月22日， BeautyChain智能合约出现重大漏洞，黑客通过此漏洞无限生成代币，导致 BitEclipse (BEC)的价值接近归零。同月25日，SmartMesh出现疑似重大安全漏洞，宣布暂停所有SMT交易和转账直至另行通知，导致损失约1.4亿美金。28日，EOS被指可能存在BEC代币合约类似的整数溢出漏洞，但没消息详细说明。5月24日， BAI交易存在大量异常问题， 损失金额未知。8月22日， GODGAME 合约被黑客入侵，GOD智能合约上的以太坊总数归零。&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="合约开发测试和部署">
 合约开发、测试和部署
 &lt;a class="anchor" href="#%e5%90%88%e7%ba%a6%e5%bc%80%e5%8f%91%e6%b5%8b%e8%af%95%e5%92%8c%e9%83%a8%e7%bd%b2">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;a href="https://ethereum.org/en/developers/docs/smart-contracts/">eth智能合约文档&lt;/a>&lt;/p></description></item><item><title>Go快速入门</title><link>https://donnol.github.io/posts/2022/01/learn_go_fast/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/learn_go_fast/</guid><description>&lt;h2 id="源码">
 源码
 &lt;a class="anchor" href="#%e6%ba%90%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 所有代码都需要放到包里
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">color&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 导入其它包
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;sync&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 枚举
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 常量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Red&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">// 红
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">Blue&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> = &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#75715e">// 蓝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">Green&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> = &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#75715e">// 绿
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 函数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewCar&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">rate&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Car&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Car&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">rate&lt;/span>: &lt;span style="color:#a6e22e">rate&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 类型字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 首字母小写，非导出，只能包内使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">rate&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 类型方法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">car&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Car&lt;/span>) &lt;span style="color:#a6e22e">String&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> { &lt;span style="color:#75715e">// 首字母大写，导出，可供其它包使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;[Car] name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">car&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, rate: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">car&lt;/span>.&lt;span style="color:#a6e22e">rate&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">car&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Car&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#75715e">// 使用ctx实现超时控制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 定时器，每隔rate秒执行一次
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">ticker&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">NewTicker&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">car&lt;/span>.&lt;span style="color:#a6e22e">rate&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">ticker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>() &lt;span style="color:#75715e">// defer语句，在方法退出前执行，做收尾工作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// for range ticker.C { // 循环，遍历chan
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 	fmt.Printf(&amp;#34;%s\n&amp;#34;, car)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ticker&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{ &lt;span style="color:#75715e">// 代码块，让逻辑更聚合，更清晰
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>				&lt;span style="color:#a6e22e">timesMutex&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">times&lt;/span>[&lt;span style="color:#a6e22e">car&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>]; &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#a6e22e">count&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">times&lt;/span>[&lt;span style="color:#a6e22e">car&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>] = &lt;span style="color:#a6e22e">count&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#a6e22e">timesMutex&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">car&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Runner&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 变量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 确保*Car实现了Runner接口
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#a6e22e">Runner&lt;/span> = (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Car&lt;/span>)(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">timesMutex&lt;/span> = new(&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">RWMutex&lt;/span>) &lt;span style="color:#75715e">// 读写锁，唯一写，多个读，读时无写
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">times&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#75715e">// 记录Car Run的次数；在声明时初始化，并配置容量
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>consensus</title><link>https://donnol.github.io/posts/2022/01/consensus/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/consensus/</guid><description>&lt;p>在中文里，共表示共同（至少两个人？一个人行不行？），识表示认识，组合一起成为共识，共同的认识，引申出共同的想法、共同的行为。&lt;/p>
&lt;p>在英语里，con是一个词根&amp;ndash;表示&amp;quot;共同&amp;quot;，sensus表示感觉，加在一起组成&lt;strong>consensus&lt;/strong>。&lt;/p>
&lt;p>人类社会的发展催生了交易，交易的前提是双方达成共识，比如油换盐，比如钱换粮。如果你不承认我的油，不愿意与我交易，那就没办法了。&lt;/p>
&lt;p>人与人之间的共识是非常难以达成的，不像歌里唱的：我说一，你说一。很多时候，我说一，他也承诺他会说一，但他没说&amp;ndash;可能因为一些事忘了说，可能因为他突然不想说了，也有可能他被胁迫了不能说。反正就是不一而足的情况导致了意见/行为不一。&lt;/p>
&lt;p>在日常生活中，特别是集市上，往往都是一手交钱、一手交货，交易完成就完成了，如果后面出现了问题&amp;ndash;比如货不对版、钱有真伪，那就是另外的问题了。&lt;/p>
&lt;p>那如果我们分别在不同的地方，没法面对面交易呢；又或者交易的东西不方便马上拿到面前来交易呢；又或者交易之后发现货不对版不想要了呢？&lt;/p>
&lt;p>这时候，为了解决这些问题，某种机构应运而生。结合现在网购流行的社会，大家不难发现有哪些这类的机构。&lt;/p>
&lt;p>目前的社会除了网购流行之外，是不是机器也很流行呢。那机器又是什么呢？机器能做什么，从而在这个社会如此流行呢？机器又能不能充当某类机构来完成某些事呢？&lt;/p>
&lt;h2 id="共识要素">
 共识要素
 &lt;a class="anchor" href="#%e5%85%b1%e8%af%86%e8%a6%81%e7%b4%a0">#&lt;/a>
&lt;/h2>
&lt;p>某件事，事的主体，事的具体。比如购物，买卖双方、以钱易物。&lt;/p>
&lt;h2 id="机器共识">
 机器共识
 &lt;a class="anchor" href="#%e6%9c%ba%e5%99%a8%e5%85%b1%e8%af%86">#&lt;/a>
&lt;/h2>
&lt;h3 id="拜占庭将军问题">
 拜占庭将军问题
 &lt;a class="anchor" href="#%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%b0%86%e5%86%9b%e9%97%ae%e9%a2%98">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98">wiki&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>拜占庭将军问题（Byzantine Generals Problem），是由莱斯利·兰波特在其同名论文中提出的&lt;strong>分布式对等&lt;/strong>网络&lt;strong>通信容错&lt;/strong>问题。&lt;/p>
&lt;p>在分布式计算中，&lt;strong>不同的计算机通过通讯交换信息达成共识&lt;/strong>而按照同一套协作策略行动。但有时候，系统中的成员计算机可能出错而发送错误的信息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而&lt;strong>破坏系统一致性&lt;/strong>。拜占庭将军问题被认为是容错性问题中最难的问题类型之一。&lt;/p>
&lt;/blockquote>
&lt;p>关键词：分布式对等、通信容错、不同计算机通过通讯交换信息从而达成共识、共识达成失败会导致系统一致性被破坏。&lt;/p>
&lt;p>问题描述：&lt;/p>
&lt;blockquote>
&lt;p>一组拜占庭将军分别各率领一支军队共同围困一座城市。&lt;/p></description></item><item><title>红黑树</title><link>https://donnol.github.io/posts/2022/01/red_black_tree/</link><pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/red_black_tree/</guid><description>&lt;p>树，保持高效在于平衡，高度低。&lt;/p>
&lt;p>
 &lt;a href="https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91">红黑树&lt;/a>如何做到的呢？&lt;/p>
&lt;h2 id="定义">
 定义
 &lt;a class="anchor" href="#%e5%ae%9a%e4%b9%89">#&lt;/a>
&lt;/h2>
&lt;h3 id="wiki">
 wiki
 &lt;a class="anchor" href="#wiki">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>红黑树（英语：Red–black tree）是一种&lt;strong>自平衡二叉查找树&lt;/strong>，是在计算机科学中用到的一种数据结构，典型用途是&lt;strong>实现关联数组&lt;/strong>。它在1972年由鲁道夫·贝尔发明，被称为&amp;quot;对称二叉B树&amp;quot;，它现代的名字源于Leo J. Guibas和罗伯特·塞奇威克于1978年写的一篇论文。红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在&lt;code>O(log n)&lt;/code>时间内完成查找、插入和删除，这里的&lt;code>n&lt;/code>是树中元素的数目。&lt;/p>
&lt;/blockquote>
&lt;h3 id="性质">
 性质
 &lt;a class="anchor" href="#%e6%80%a7%e8%b4%a8">#&lt;/a>
&lt;/h3>
&lt;p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：&lt;/p>
&lt;pre>&lt;code>节点是红色或黑色。
根是黑色。
所有叶子都是黑色（叶子是NIL节点）。
每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）
从**任一节点到其每个叶子**的所有简单路径都包含**相同数目的黑色节点**。
&lt;/code>&lt;/pre>
&lt;p>一句话概况：或红或黑，首尾皆黑，红子必黑，任一点至所有尾含黑同数。&lt;/p>
&lt;p>为确保任一点至所有尾含黑同数，路径中必须插入红点，而在哪个位置插呢（必须考虑红子必黑原则）？&lt;/p>
&lt;blockquote>
&lt;p>这些约束确保了红黑树的关键特性：&lt;strong>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长&lt;/strong>。结果是这个树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都&lt;strong>要求与树的高度成比例&lt;/strong>，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。&lt;/p>
&lt;p>要知道为什么这些性质确保了这个结果，注意到&lt;strong>性质4导致了路径不能有两个毗连的红色节点&lt;/strong>就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为&lt;strong>根据性质5所有最长的路径都有相同数目的黑色节点&lt;/strong>，这就表明了&lt;strong>没有路径能多于任何其他路径的两倍长&lt;/strong>。&lt;/p>
&lt;p>在很多树数据结构的表示中，一个节点有可能只有一个子节点，而叶子节点包含数据。用这种范例表示红黑树是可能的，但是这会改变一些性质并使算法复杂。为此，&lt;strong>本文中我们使用&amp;quot;nil叶子&amp;quot;或&amp;quot;空（null）叶子&amp;quot;，如上图所示，它不包含数据而只充当树在此结束的指示&lt;/strong>。这些节点在绘图中经常被省略，导致了这些树好像同上述原则相矛盾，而实际上不是这样。与此有关的结论是&lt;strong>所有节点都有两个子节点，尽管其中的一个或两个可能是空叶子&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="实现">
 实现
 &lt;a class="anchor" href="#%e5%ae%9e%e7%8e%b0">#&lt;/a>
&lt;/h2>
&lt;h3 id="操作">
 操作
 &lt;a class="anchor" href="#%e6%93%8d%e4%bd%9c">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>因为每一个红黑树也是一个特化的二叉查找树，因此红黑树上的只读操作与普通二叉查找树上的只读操作相同。然而，&lt;strong>在红黑树上进行插入操作和删除操作会导致不再符合红黑树的性质&lt;/strong>。&lt;strong>恢复&lt;/strong>红黑树的性质需要少量（O(log n)）的&lt;strong>颜色变更&lt;/strong>（实际是非常快速的）和&lt;strong>不超过三次树旋转&lt;/strong>（对于插入操作是两次）。虽然插入和删除很复杂，但操作时间仍可以保持为O(log n)次。&lt;/p></description></item><item><title>Rust常用库</title><link>https://donnol.github.io/posts/2022/01/rust_commonly_used_crate/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/rust_commonly_used_crate/</guid><description>&lt;h2 id="crossbeam">
 crossbeam
 &lt;a class="anchor" href="#crossbeam">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://github.com/crossbeam-rs/crossbeam">crossbeam&lt;/a>: &lt;strong>Tools for concurrent programming in Rust&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Atomics&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Data structures&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Memory management: epoch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Thread synchronization: channel, Parker, ShardedLock, WaitGroup&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Utilities&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="channel-example">
 channel example
 &lt;a class="anchor" href="#channel-example">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">use&lt;/span> crossbeam_channel::unbounded;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> (s, r) &lt;span style="color:#f92672">=&lt;/span> unbounded();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s.send(&lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>assert_eq!(r.recv(), Ok(&lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>缓存和数据库如何保持一致</title><link>https://donnol.github.io/posts/2022/01/cache/</link><pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/01/cache/</guid><description>&lt;h2 id="缓存读">
 缓存读
 &lt;a class="anchor" href="#%e7%bc%93%e5%ad%98%e8%af%bb">#&lt;/a>
&lt;/h2>
&lt;p>从缓存读，如果读到了，直接返回；如果读不到，继续去数据库读（singleflight），读到后，更新缓存，返回结果。&lt;/p>
&lt;h2 id="缓存写">
 缓存写
 &lt;a class="anchor" href="#%e7%bc%93%e5%ad%98%e5%86%99">#&lt;/a>
&lt;/h2>
&lt;p>为什么是删缓存，而不是更新缓存呢？&lt;/p>
&lt;p>主要是怕两个并发的写操作导致脏数据。&lt;/p>
&lt;p>删除缓存和更新磁盘谁先谁后呢？&lt;/p>
&lt;p>1.如果先删除缓存，再更新磁盘时的问题：&lt;/p>
&lt;p>数据发生了变更，先删除了缓存，然后要去修改数据库，此时还没修改。 &amp;ndash; 删了缓存，未完成数据库修改
另一个请求过来，去读缓存，发现缓存空了，去查询数据库，查到了修改前的旧数据，放到了缓存中。 &amp;ndash; 因为上面的请求里修改数据库的部分还未完成
随后数据变更的程序完成了数据库的修改。&amp;ndash; 这时才完成，可缓存已经填充了之前的旧值了
来到这，数据库和缓存中的数据就不一样了。&lt;/p>
&lt;p>2.先更新磁盘，再删除缓存的问题：&lt;/p>
&lt;p>先更新数据库，再删除缓存，如果数据库更新了，但是缓存删除失败了，那么缓存中的数据还是旧数据，出现数据不一致&lt;/p>
&lt;p>先删除缓存，再更新数据库。如果数据库更新失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致。&lt;/p>
&lt;p>比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。&lt;/p>
&lt;p>但，这个case理论上会出现，不过，实际上出现的概率可能非常低，因为这个条件需要发生在读缓存时缓存失效，而且并发着有一个写操作。而实际上数据库的写操作会比读操作慢得多，而且还要锁表，而读操作必需在写操作前进入数据库操作，而又要晚于写操作更新缓存，所有的这些条件都具备的概率基本并不大。&lt;/p>
&lt;p>所以，这也就是Quora上的那个答案里说的，要么通过2PC或是Paxos协议保证一致性，要么就是拼命的降低并发时脏数据的概率，而Facebook使用了这个降低概率的玩法，因为2PC太慢，而Paxos太复杂。当然，最好还是为缓存设置上过期时间。&lt;/p>
&lt;p>
 &lt;a href="https://coolshell.cn/articles/17416.html">参照&lt;/a>&lt;/p>
&lt;h2 id="代码">
 代码
 &lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 缓存，一般先将数据从磁盘读出来写到内存里，供用户高速访问，减少读磁盘 -- 快取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 另有缓冲，将数据先写到内存里，待装满后一次性写入磁盘，可以少写很多次 -- 缓冲
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 不难看出，无论快取还是缓冲，都涉及到内存和磁盘的读写。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 首先，对于缓存，目前使用较多的中间件是redis、memcached等，当然也有自己在程序中内置map充当缓存的。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 那么，下面来看下如何在内存和磁盘之间同步数据：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// exp表示当前时间后的exp秒后过期，传0则无过期
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">exp&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Del&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">exp&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">exp&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">vlaue&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 用户 有增删改查四个操作，在操作时，对应的缓存和磁盘如何变化呢？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewClient&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">cache&lt;/span> &lt;span style="color:#a6e22e">Cache&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">store&lt;/span> &lt;span style="color:#a6e22e">Store&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">cache&lt;/span>: &lt;span style="color:#a6e22e">cache&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">store&lt;/span>: &lt;span style="color:#a6e22e">store&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">defExp&lt;/span> = &lt;span style="color:#ae81ff">300&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Add 先写磁盘还是缓存呢？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 会不会已经在Store里存在了呢？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 先从Store Get一次？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 一般来说，key都是唯一的：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 此时，必须请求一次Store，确认数据不存在；如果此时数据存在，直接返回错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 缓存里会不会也有呢？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 先从Cache里读一次？
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 如果能通过业务检查，正常来说，缓存里是没有的；
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 写磁盘
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">defExp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 1. 写缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// client.cache.Set(key, value, defExp)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 2. 不写，等获取时从磁盘取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Mod&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 更新磁盘
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Update&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">defExp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 1. 更新缓存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// client.cache.Set(key, value, defExp)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// 2. 不更新，删掉缓存，等获取时从磁盘取 -- Cache Aside Pattern(旁路缓存方案): 一个 lazy 计算的思想，不要每次都重新做复杂的计算，而是让它到需要被使用的时候再重新计算
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Del&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Del&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 从磁盘删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Delete&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 1. 从缓存删除
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Del&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 从Cache获取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// 以SingleFlight方式从Store读:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// https://pkg.go.dev/golang.org/x/sync/singleflight
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// 这个库的主要作用就是将一组相同的请求合并成一个请求，实际上只会去请求一次，然后对所有的请求返回相同的结果。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#75715e">// 在一个请求的时间周期内实际上只会向底层的数据库发起一次请求大大减少对数据库的压力。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">valueFromStore&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">store&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">v&lt;/span> = &lt;span style="color:#a6e22e">valueFromStore&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// 设置Cache
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">cache&lt;/span>.&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">defExp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>ebpf</title><link>https://donnol.github.io/posts/2021/12/ebpf/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/ebpf/</guid><description>&lt;p>
 &lt;a href="https://ebpf.io/">ebpf&lt;/a>: 扩展伯克利包过滤器。&lt;/p>
&lt;p>下面的内容主要来源于
 &lt;a href="https://mp.weixin.qq.com/s/xxBQuj-iD103kWeicanUFA">译文&lt;/a>。&lt;/p>
&lt;h2 id="用处">
 用处
 &lt;a class="anchor" href="#%e7%94%a8%e5%a4%84">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>目前，主要有两大组触发器。&lt;/p>
&lt;p>第一组用于处理网络数据包和管理网络流量。它们是 XDP、流量控制事件及其他几个事件。&lt;/p>
&lt;p>以下情况需要用到这些事件：&lt;/p>
&lt;blockquote>
&lt;p>创建简单但非常有效的防火墙。Cloudflare 和 Facebook 等公司使用 BPF 程序来过滤掉大量的寄生流量，并打击最大规模的 DDoS 攻击。由于处理发生在数据包生命的最早阶段，直接在内核中进行（BPF 程序的处理有时甚至可以直接推送到网卡中进行），因此可以通过这种方式处理巨量的流量。这些事情过去都是在专门的网络硬件上完成的。&lt;/p>
&lt;p>创建更智能、更有针对性、但性能更好的防火墙——这些防火墙可以检查通过的流量是否符合公司的规则、是否存在漏洞模式等。例如，Facebook 在内部进行这种审计，而一些项目则对外销售这类产品。&lt;/p>
&lt;p>创建智能负载均衡器。最突出的例子就是 Cilium 项目，它最常被用作 K8s 集群中的网格网络。Cilium 对流量进行管理、均衡、重定向和分析。所有这些都是在内核运行的小型 BPF 程序的帮助下完成的，以响应这个或那个与网络数据包或套接字相关的事件。&lt;/p>
&lt;/blockquote>
&lt;p>这是第一组与网络问题相关并能够影响网络通信行为的触发器。第二组则与更普遍的可观察性相关；在大多数情况下，这组的程序无法影响任何事件，而只能“观察”。这才是我更感兴趣的。&lt;/p>
&lt;p>这组的触发器有如下几个：&lt;/p>
&lt;blockquote>
&lt;p>perf 事件（perf events）——与性能和 perf Linux 分析器相关的事件：硬件处理器计数器、中断处理、小 / 大内存异常拦截等等。例如，我们可以设置一个处理程序，每当内核需要从 swap 读取内存页时，该处理程序就会运行。例如，想象有这样一个实用程序，它显示了当前所有使用 swap 的程序。&lt;/p></description></item><item><title>时间和文字</title><link>https://donnol.github.io/posts/2021/12/time_wenzi/</link><pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/time_wenzi/</guid><description>&lt;p>带领，今天突然用到这个“带”字时，觉得它不是我印象中的“带”字，这是为什么呢？&lt;/p>
&lt;p>很重的一种陌生感迎面而来，这真的是曾经伴随我历经千测万考的字吗？&lt;/p>
&lt;p>这种突然觉得某个曾经很熟悉的字很陌生的感觉，真的很奇怪。&lt;/p></description></item><item><title>etcd</title><link>https://donnol.github.io/posts/2021/12/etcd/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/etcd/</guid><description>&lt;h1 id="etcd">
 etcd
 &lt;a class="anchor" href="#etcd">#&lt;/a>
&lt;/h1>
&lt;h2 id="raft">
 raft
 &lt;a class="anchor" href="#raft">#&lt;/a>
&lt;/h2>
&lt;h3 id="介绍httpspkggodevgoetcdioetcdraftv3section-readme">
 
 &lt;a href="https://pkg.go.dev/go.etcd.io/etcd/raft/v3#section-readme">介绍&lt;/a>
 &lt;a class="anchor" href="#%e4%bb%8b%e7%bb%8dhttpspkggodevgoetcdioetcdraftv3section-readme">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>由多个节点组成的集群维护着一个可复制状态机的协议。通过复制日志来保持状态机的同步。
 &lt;a href="https://raft.github.io/raft.pdf">可理解的共识算法&lt;/a>&lt;/p>
&lt;p>状态机以消息为输入。消息可以是一个本地定时器更新，或一条网络消息。输出一个3元结构：&lt;code>[]Messages, []LogEntries, NextState&lt;/code>，分别是消息列表、日志条目列表、下个状态。同样状态的状态机，在相同输入时总是输出相同结果。&lt;/p>
&lt;/blockquote>
&lt;h3 id="插曲">
 插曲
 &lt;a class="anchor" href="#%e6%8f%92%e6%9b%b2">#&lt;/a>
&lt;/h3>
&lt;p>人、联系、共识&lt;/p>
&lt;p>人生下来，触摸着这个世界的人和物，做着或有趣或无聊的事，建立起或浅或深的联系。&lt;/p>
&lt;p>当两个人面对面时，就某个想法达成一致或不一致，非常容易。&lt;/p>
&lt;p>如果两个人不是面对面呢？&lt;/p>
&lt;p>如果不只两个人，同坐在祠堂里呢？&lt;/p>
&lt;p>如果不止两个人，还分散在不同地点呢？&lt;/p></description></item><item><title>vscode-go在go.mod在非根目录情况下失效的问题</title><link>https://donnol.github.io/posts/2021/12/vscode-go-module/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/vscode-go-module/</guid><description>&lt;p>问题如图：&lt;/p>
&lt;p>
 &lt;img src="https://donnol.github.io/image/vscode-go-module-not-support-noroot-gomod.png" alt="问题" />&lt;/p>
&lt;p>解决：&lt;/p>
&lt;p>添加配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">&amp;#34;gopls&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;experimentalWorkspaceModule&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>等&lt;code>go 1.18&lt;/code>的&lt;code>workspace&lt;/code>模式推出之后，应该就不需要配置这个了。&lt;/p></description></item><item><title>mqtt</title><link>https://donnol.github.io/posts/2021/12/mqtt/</link><pubDate>Tue, 14 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/mqtt/</guid><description>&lt;h2 id="物联网消息标准">
 物联网消息标准
 &lt;a class="anchor" href="#%e7%89%a9%e8%81%94%e7%bd%91%e6%b6%88%e6%81%af%e6%a0%87%e5%87%86">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;a href="https://mqtt.org/">官网&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>It is designed as an extremely lightweight publish/subscribe messaging transport that is ideal for connecting remote devices with a small code footprint and minimal network bandwidth.&lt;/p>
&lt;p>极其轻量的发布/订阅消息传输，使用小量代码脚本和极小网络带宽来连接远程设备。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>轻量&lt;/li>
&lt;li>高效&lt;/li>
&lt;li>双向&lt;/li>
&lt;li>大规模（百万设备）&lt;/li>
&lt;li>可靠&lt;/li>
&lt;li>支持不可靠网络&lt;/li>
&lt;li>安全&lt;/li>
&lt;/ul>
&lt;p>
 &lt;img src="https://donnol.github.io/image/mqtt%e6%9e%b6%e6%9e%84%e5%9b%be.png" alt="架构图" />&lt;/p>
&lt;p>多个&lt;code>mqtt&lt;/code>客户端连接到&lt;code>broker&lt;/code>(译为：中间商)，围绕&lt;code>topic&lt;/code>来实现发布/订阅操作，某些客户端向&lt;code>topic&lt;/code>发布消息，某些客户端订阅&lt;code>topic&lt;/code>上的消息，当&lt;code>broker&lt;/code>接收到某个&lt;code>topic&lt;/code>上的消息时，它会将消息转发到订阅了该&lt;code>topic&lt;/code>的客户端。&lt;/p>
&lt;p>
 &lt;a href="https://docs.oasis-open.org/mqtt/mqtt/v5.0/mqtt-v5.0.html">mqtt 5.0&lt;/a>&lt;/p></description></item><item><title>redis sds</title><link>https://donnol.github.io/posts/2021/12/redis_sds/</link><pubDate>Mon, 13 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/redis_sds/</guid><description>&lt;h2 id="简单动态字符串">
 简单动态字符串
 &lt;a class="anchor" href="#%e7%ae%80%e5%8d%95%e5%8a%a8%e6%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2">#&lt;/a>
&lt;/h2>
&lt;p>结构：&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">len&lt;/th>
 &lt;th style="text-align: left">alloc&lt;/th>
 &lt;th style="text-align: left">flag&lt;/th>
 &lt;th style="text-align: left">buf&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">长度(已使用空间大小)&lt;/td>
 &lt;td style="text-align: left">分配(总共空间大小：buf 的大小减 1 &amp;ndash; &amp;lsquo;\0&amp;rsquo;字符占用了 1)&lt;/td>
 &lt;td style="text-align: left">标记(sdshdr 的类型)&lt;/td>
 &lt;td style="text-align: left">真正存储字符串的地方&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>文件：&lt;/p></description></item><item><title>k8s</title><link>https://donnol.github.io/posts/2021/12/k8s/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/k8s/</guid><description>&lt;h2 id="what">
 What
 &lt;a class="anchor" href="#what">#&lt;/a>
&lt;/h2>
&lt;p>docker 带来容器之风，以致容器多不胜数。如何编排和管理众多容器，使得它们同心协力办好事情，即成为了当下最大的课题。&lt;/p>
&lt;p>为此，k8s 应运而生。&lt;/p>
&lt;p>容器，通讯，存储，配置。&lt;/p>
&lt;h2 id="why">
 Why
 &lt;a class="anchor" href="#why">#&lt;/a>
&lt;/h2>
&lt;p>为编排和管理数量众多的容器。&lt;/p>
&lt;h2 id="how">
 How
 &lt;a class="anchor" href="#how">#&lt;/a>
&lt;/h2>
&lt;h3 id="install">
 Install
 &lt;a class="anchor" href="#install">#&lt;/a>
&lt;/h3>
&lt;h4 id="k8s-集群搭建所需资源">
 k8s: 集群搭建所需资源
 &lt;a class="anchor" href="#k8s-%e9%9b%86%e7%be%a4%e6%90%ad%e5%bb%ba%e6%89%80%e9%9c%80%e8%b5%84%e6%ba%90">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>One or more machines running one of:&lt;/p></description></item><item><title>数据密集型应用设计</title><link>https://donnol.github.io/posts/2021/12/ddia/</link><pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/ddia/</guid><description>&lt;h2 id="第一章-可靠性可扩展性可维护性">
 第一章 可靠性、可扩展性、可维护性
 &lt;a class="anchor" href="#%e7%ac%ac%e4%b8%80%e7%ab%a0-%e5%8f%af%e9%9d%a0%e6%80%a7%e5%8f%af%e6%89%a9%e5%b1%95%e6%80%a7%e5%8f%af%e7%bb%b4%e6%8a%a4%e6%80%a7">#&lt;/a>
&lt;/h2>
&lt;p>数据密集型应用和计算密集型应用&lt;/p>
&lt;blockquote>
&lt;p>现今很多应用程序都是 &lt;strong>数据密集型（data-intensive）&lt;/strong> 的，而非 &lt;strong>计算密集型（compute-intensive）&lt;/strong> 的。因此&lt;strong>CPU&lt;/strong>很少成为这类应用的瓶颈，更大的问题通常来自&lt;strong>数据量、数据复杂性、以及数据的变更速度&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;p>数据密集型应用通常由标准组件构建而成，标准组件提供了很多通用的功能；例如，许多应用程序都需要：&lt;/p>
&lt;blockquote>
&lt;p>存储数据，以便自己或其他应用程序之后能再次找到 （&lt;strong>数据库（database）&lt;/strong>）&lt;/p>
&lt;p>记住开销昂贵操作的结果，加快读取速度（&lt;strong>缓存（cache）&lt;/strong>）&lt;/p>
&lt;p>允许用户按关键字搜索数据，或以各种方式对数据进行过滤（&lt;strong>搜索索引（search indexes）&lt;/strong>）&lt;/p>
&lt;p>向其他进程发送消息，进行异步处理（&lt;strong>流处理（stream processing）&lt;/strong>）&lt;/p>
&lt;p>定期处理累积的大批量数据（&lt;strong>批处理（batch processing）&lt;/strong>）&lt;/p>
&lt;blockquote>
&lt;p>对应可选的组件在我映像中可以有：&lt;/p>
&lt;p>数据库：mysql, postgresql&lt;/p>
&lt;p>缓存: redis, memcached&lt;/p>
&lt;p>搜索索引: elastic search, sonic, redis search&lt;/p>
&lt;p>流处理: kafka, redis stream&lt;/p>
&lt;p>批处理: linux cron, golang timer&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>使用较小的通用组件创建了一个全新的、专用的数据系统。&lt;/p></description></item><item><title>burn cpu use golang</title><link>https://donnol.github.io/posts/2021/12/burn_cpu_use_golang/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/burn_cpu_use_golang/</guid><description>&lt;h2 id="虚假的-burn">
 虚假的 burn
 &lt;a class="anchor" href="#%e8%99%9a%e5%81%87%e7%9a%84-burn">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">fakeBurn&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="真正的-burn">
 真正的 burn
 &lt;a class="anchor" href="#%e7%9c%9f%e6%ad%a3%e7%9a%84-burn">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;runtime&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">numBurn&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">updateInterval&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">cpuBurn&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">2147483647&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Gosched yields the processor, allowing other goroutines to run. It does not suspend the current goroutine, so execution resumes automatically.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Gosched让当前goroutine让出处理器，从而使得其它goroutine可以运行。它不会挂起/暂停当前的goroutine，它会自动恢复执行。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">Gosched&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">IntVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">numBurn&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;number of cores to burn (0 = all)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">IntVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">updateInterval&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;u&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;seconds between updates (0 = don&amp;#39;t update)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">flag&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">numBurn&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">numBurn&lt;/span> = &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">NumCPU&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">GOMAXPROCS&lt;/span>(&lt;span style="color:#a6e22e">numBurn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Burning %d CPUs/cores\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">numBurn&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">numBurn&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">cpuBurn&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 一直执行，区别是其中一个会定期打印，另一个不会打印
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">updateInterval&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Tick&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">updateInterval&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">secs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">updateInterval&lt;/span>; ; &lt;span style="color:#a6e22e">secs&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">updateInterval&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d seconds\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">secs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {} &lt;span style="color:#75715e">// wait forever
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>docker compose使用extra host让容器访问主机服务</title><link>https://donnol.github.io/posts/2021/12/docker_compose_extra_host/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/docker_compose_extra_host/</guid><description>&lt;p>
 &lt;a href="https://donnol.github.io/posts/2021/12/docker_compose_extra_host/">首发于：简单博客&lt;/a>&lt;/p>
&lt;h2 id="docker-compose-如何访问主机服务">
 docker compose 如何访问主机服务
 &lt;a class="anchor" href="#docker-compose-%e5%a6%82%e4%bd%95%e8%ae%bf%e9%97%ae%e4%b8%bb%e6%9c%ba%e6%9c%8d%e5%8a%a1">#&lt;/a>
&lt;/h2>
&lt;p>docker compose 里面的容器怎么访问主机自身起的服务呢？&lt;/p>
&lt;p>
 &lt;a href="https://docs.docker.com/engine/release-notes/#networking-3">20.10.0 版本在 linux 新增 host.docker.internal 支持&lt;/a>：
&lt;code>docker run -it --add-host=host.docker.internal:host-gateway alpine cat /etc/hosts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>127.0.0.1 localhost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>::1 localhost ip6-localhost ip6-loopback
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fe00::0 ip6-localnet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ff00::0 ip6-mcastprefix
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ff02::1 ip6-allnodes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ff02::2 ip6-allrouters
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.17.0.1 host.docker.internal &lt;span style="color:#75715e"># --add-host的作用就是添加了这行到/etc/hosts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>172.17.0.3 cb0565ceea26
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>数据库管理工具之dbeaver</title><link>https://donnol.github.io/posts/2021/12/dbeaver/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/dbeaver/</guid><description>&lt;p>
 &lt;a href="https://github.com/dbeaver/dbeaver">dbeaver: github&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://github.com/dbeaver/dbeaver/releases">下载页&lt;/a>&lt;/p>
&lt;p>面向开发者、SQL 编程人员、数据库管理员和分析人员的免费的多平台数据库工具。
支持任何已有 JDBC 驱动的数据库（基本上是任何数据库）。商业版本还额外支持非 JDBC 数据源，比如：MongoDB, Cassandra, Couchbase, Redis, BigTable, DynamoDB 等。&lt;/p>
&lt;p>拥有的特性：元数据编辑、SQL 编辑、富文本编辑、ER 图、数据导出/导入/转译、SQL 执行计划等。
基于 Eclipse 平台。
使用插件架构，为以下数据库提供额外功能：MySQL/MariaDB, PostgreSQL, Greenplum, Oracle, DB2 LUW, Exasol, SQL Server, Sybase/SAP ASE, SQLite, Firebird, H2, HSQLDB, Derby, Teradata, Vertica, Netezza, Informix 等。&lt;/p>
&lt;blockquote>
&lt;p>Free multi-platform database tool for developers, SQL programmers, database administrators and analysts.
Supports any database which has JDBC driver (which basically means - ANY database). Commercial versions also support non-JDBC datasources such as MongoDB, Cassandra, Couchbase, Redis, BigTable, DynamoDB, etc. You can find the list of all databases supported in commercial versions here.&lt;/p></description></item><item><title>Domain-oriented development</title><link>https://donnol.github.io/posts/2021/12/domain/</link><pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/domain/</guid><description>&lt;p>面向领域开发。&lt;/p>
&lt;p>将业务复杂度和技术复杂度分开，逐个击破。&lt;/p>
&lt;p>分离领域，各司其职。&lt;/p>
&lt;p>降低复杂度，容易测试。&lt;/p>
&lt;h2 id="ddd-尝试">
 DDD 尝试
 &lt;a class="anchor" href="#ddd-%e5%b0%9d%e8%af%95">#&lt;/a>
&lt;/h2>
&lt;p>order.go:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">domain&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;crypto/rand&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;math/big&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/pkg/errors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 关键词：用户、店铺、商品、订单
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 场景描述：店铺展示商品，其价格为P、库存为N，用户（余额为Y）看到商品觉得合适，于是下单购买B个；
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 购买前，用户余额Y必须不小于P，商品库存N不小于B；购买后，用户余额减少P，库存减少B；
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 先不考虑并发情况，建立此时的领域模型
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">phone&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 电话
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">balance&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span> &lt;span style="color:#75715e">// 余额
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Shop&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 地址
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Product&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span> &lt;span style="color:#75715e">// 价格
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">stock&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#75715e">// 库存
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ownShop&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Shop&lt;/span> &lt;span style="color:#75715e">// 所属商铺
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#75715e">// 名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#75715e">// 用户
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">product&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span> &lt;span style="color:#75715e">// 商品
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewUser&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">phone&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">bal&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">phone&lt;/span>: &lt;span style="color:#a6e22e">phone&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">balance&lt;/span>: &lt;span style="color:#a6e22e">bal&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>) &lt;span style="color:#a6e22e">Balance&lt;/span>() &lt;span style="color:#a6e22e">Money&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">balance&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>) &lt;span style="color:#a6e22e">DeductBalance&lt;/span>(&lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">balance&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">amount&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;not enough money&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">balance&lt;/span> &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#a6e22e">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewShop&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Shop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Shop&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">addr&lt;/span>: &lt;span style="color:#a6e22e">addr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewProduct&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span>, &lt;span style="color:#a6e22e">stock&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">shop&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Shop&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#a6e22e">price&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stock&lt;/span>: &lt;span style="color:#a6e22e">stock&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ownShop&lt;/span>: &lt;span style="color:#a6e22e">shop&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span>) &lt;span style="color:#a6e22e">Stock&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">stock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span>) &lt;span style="color:#a6e22e">DeductStock&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">stock&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">c&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;not enough stock&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">stock&lt;/span> &lt;span style="color:#f92672">-=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// NewOrder 用户对商品下单c个
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewOrder&lt;/span>(&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>, &lt;span style="color:#a6e22e">product&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Order&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">GenerateRandomString&lt;/span>(&lt;span style="color:#ae81ff">12&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">DeductBalance&lt;/span>(&lt;span style="color:#a6e22e">product&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">Money&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">product&lt;/span>.&lt;span style="color:#a6e22e">DeductStock&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Order&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#a6e22e">name&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>: &lt;span style="color:#a6e22e">user&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">product&lt;/span>: &lt;span style="color:#a6e22e">product&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Order&lt;/span>) &lt;span style="color:#a6e22e">User&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Order&lt;/span>) &lt;span style="color:#a6e22e">Product&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Product&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>.&lt;span style="color:#a6e22e">product&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// GenerateRandomString 随机字符串包含有数字和大小写字母
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">GenerateRandomString&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">letters&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">letters&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">generate&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">letters&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">n&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">num&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>(&lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Reader&lt;/span>, &lt;span style="color:#a6e22e">big&lt;/span>.&lt;span style="color:#a6e22e">NewInt&lt;/span>(int64(len(&lt;span style="color:#a6e22e">letters&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithStack&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ret&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">letters&lt;/span>[&lt;span style="color:#a6e22e">num&lt;/span>.&lt;span style="color:#a6e22e">Int64&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> string(&lt;span style="color:#a6e22e">ret&lt;/span>), &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>关于我</title><link>https://donnol.github.io/posts/aboutme/about-me/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/aboutme/about-me/</guid><description>&lt;p>&lt;strong>听说读写想想干，吃喝玩乐洗洗睡。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>思前想后成伟绩，轻描淡写道至理。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>鹏程万里追无穷，法天象地铸有道。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>生老病死自当然，功名利禄也枉然&lt;/strong>&lt;/p></description></item><item><title>github action deploy hugo blog</title><link>https://donnol.github.io/posts/2021/12/github_action_deploy_hugo_blog/</link><pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/12/github_action_deploy_hugo_blog/</guid><description>&lt;h2 id="why">
 why
 &lt;a class="anchor" href="#why">#&lt;/a>
&lt;/h2>
&lt;p>为了将视线保持在文章上，减少构建和发布的时间占用。&lt;/p>
&lt;h2 id="what">
 what
 &lt;a class="anchor" href="#what">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>github action&lt;/code>是&lt;code>GitHub&lt;/code>推出的持续集成/持续部署工具，只需要在项目中添加&lt;code>workflow.yml&lt;/code>配置文件，在其中配置好任务、工作、步骤等，即可在指定动作发生时自动触发编排好的动作。换言之，如果我们在我们的博客仓库里配置了自动将内容打包和发布的&lt;code>workflow.yml&lt;/code>，那我们就可以把精力集中在文章的编写，然后轻轻地提交推送，即可完成博客地打包和发布，&lt;code>very easy and smooth&lt;/code>。&lt;/p>
&lt;h2 id="how">
 how
 &lt;a class="anchor" href="#how">#&lt;/a>
&lt;/h2>
&lt;p>在github准备一个blog仓库，用于存放原始信息；再准备一个&lt;code>github page&lt;/code>仓库，用于存放打包数据。&lt;/p>
&lt;p>其中&lt;code>github page&lt;/code>仓库已开启page，可以通过&lt;code>github page&lt;/code>设置的域名访问。&lt;/p>
&lt;p>
 &lt;a href="https://github.com/donnol/blog">我的blog仓库&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://github.com/donnol/donnol.github.io">我的github page仓库&lt;/a>&lt;/p>
&lt;h3 id="workflow">
 workflow
 &lt;a class="anchor" href="#workflow">#&lt;/a>
&lt;/h3>
&lt;p>
 &lt;a href="https://github.com/donnol/blog/blob/main/.github/workflows/workflow.yml">这是我结合网络各位英豪所总结出来的一个workflow.yml配置文件&lt;/a>&lt;/p></description></item><item><title>linux epoll</title><link>https://donnol.github.io/posts/2021/07/linux-epoll/</link><pubDate>Sat, 17 Jul 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/07/linux-epoll/</guid><description>&lt;h1 id="linux-epoll">
 linux epoll
 &lt;a class="anchor" href="#linux-epoll">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;a href="https://zh.wikipedia.org/wiki/Epoll">wiki&lt;/a>&lt;/p>
&lt;p>
 &lt;a href="https://man7.org/linux/man-pages/man7/epoll.7.html">手册&lt;/a>&lt;/p>
&lt;h2 id="why">
 why
 &lt;a class="anchor" href="#why">#&lt;/a>
&lt;/h2>
&lt;h2 id="what">
 what
 &lt;a class="anchor" href="#what">#&lt;/a>
&lt;/h2>
&lt;p>Linux内核的&lt;strong>可扩展I/O事件通知机制&lt;/strong>。&lt;/p>
&lt;p>于Linux 2.5.44首度登场，它设计目的旨在取代既有POSIX select(2)与poll(2)系统函数，让需要大量操作文件描述符的程序得以发挥更优异的性能（举例来说：旧有的系统函数所花费的时间复杂度为O(n)，epoll的时间复杂度O(log n)）。epoll 实现的功能与 poll 类似，都是监听多个文件描述符上的事件。&lt;/p>
&lt;h2 id="how">
 how
 &lt;a class="anchor" href="#how">#&lt;/a>
&lt;/h2>
&lt;p>epoll 通过使用红黑树(RB-tree)搜索被监控的文件描述符(file descriptor)。&lt;/p></description></item><item><title>Go实现AOP</title><link>https://donnol.github.io/posts/2021/01/proxy-between-layer/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/01/proxy-between-layer/</guid><description>&lt;h2 id="aop">
 AOP
 &lt;a class="anchor" href="#aop">#&lt;/a>
&lt;/h2>
&lt;p>面向切面编程（AOP: Aspect Oriented Program）。&lt;/p>
&lt;h3 id="划分重复复用">
 划分，重复，复用
 &lt;a class="anchor" href="#%e5%88%92%e5%88%86%e9%87%8d%e5%a4%8d%e5%a4%8d%e7%94%a8">#&lt;/a>
&lt;/h3>
&lt;p>我们知道，面向对象的特点是继承、多态和封装。而封装就要求将功能&lt;strong>分散&lt;/strong>到不同的对象中去，这在软件设计中往往称为职责分配。实际上也就是说，让不同的类设计不同的方法。这样代码就分散到一个个的类中去了。这样做的好处是降低了代码的复杂程度，使类可重用。&lt;/p>
&lt;blockquote>
&lt;p>出现的问题：&lt;/p>
&lt;p>但是人们也发现，在分散代码的同时，也增加了代码的重复性。什么意思呢？比如说，我们在两个类中，可能都需要在每个方法中做日志。按面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。&lt;/p>
&lt;/blockquote>
&lt;p>想法1：&lt;/p>
&lt;blockquote>
&lt;p>也许有人会说，那好办啊，我们可以将这段代码写在一个独立的类独立的方法里，然后再在这两个类中调用。但是，这样一来，这两个类跟我们上面提到的独立的类就有耦合了，它的改变会影响这两个类。&lt;/p>
&lt;/blockquote>
&lt;p>那么，有没有什么办法，能让我们在需要的时候，随意地加入代码呢？&lt;/p>
&lt;blockquote>
&lt;p>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。&lt;/p>
&lt;p>一般而言，我们管切入到指定类指定方法的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点。&lt;/p>
&lt;/blockquote>
&lt;p>有了AOP，我们就可以把几个类共有的代码，抽取到一个切片中，等到需要时再切入对象中去，从而改变其原有的行为。&lt;/p>
&lt;p>OOP从&lt;strong>横向&lt;/strong>上区分出一个个的类来，而AOP则从&lt;strong>纵向&lt;/strong>上向对象中加入特定的代码。&lt;/p>
&lt;p>从技术上来说，AOP基本上是通过&lt;strong>代理&lt;/strong>机制实现的。&lt;/p>
&lt;p>
 &lt;img src="https://donnol.github.io/image/AOP.png" alt="AOP" />&lt;/p>
&lt;h2 id="go实现aop----层间代理">
 Go实现AOP &amp;ndash; 层间代理
 &lt;a class="anchor" href="#go%e5%ae%9e%e7%8e%b0aop----%e5%b1%82%e9%97%b4%e4%bb%a3%e7%90%86">#&lt;/a>
&lt;/h2>
&lt;p>假设有store，从数据库获取数据，其中有方法IUserStore.GetByID，传入id参数，返回用户信息:&lt;/p></description></item><item><title>hugo搭建博客</title><link>https://donnol.github.io/posts/2021/01/hugo-blog/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/01/hugo-blog/</guid><description>&lt;h2 id="操作">
 操作
 &lt;a class="anchor" href="#%e6%93%8d%e4%bd%9c">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装hugo。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用hugo新建项目&lt;/p>
&lt;/li>
&lt;li>
&lt;p>添加主题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动博客&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>go ctx</title><link>https://donnol.github.io/posts/2020/12/go-ctx/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2020/12/go-ctx/</guid><description>&lt;h2 id="ctx">
 ctx
 &lt;a class="anchor" href="#ctx">#&lt;/a>
&lt;/h2>
&lt;p>1.why&lt;/p>
&lt;p>&lt;code>goroutine&lt;/code>号称百万之众，互相之间盘根错节，难以管理控制。为此，必须提供一种机制来管理控制它们。&lt;/p>
&lt;h3 id="各自为战">
 各自为战
 &lt;a class="anchor" href="#%e5%90%84%e8%87%aa%e4%b8%ba%e6%88%98">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// start first
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// start second
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title>pstree进程树及说明</title><link>https://donnol.github.io/posts/2021/01/pstree/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2021/01/pstree/</guid><description>&lt;h2 id="pstree进程树及说明">
 pstree进程树及说明
 &lt;a class="anchor" href="#pstree%e8%bf%9b%e7%a8%8b%e6%a0%91%e5%8f%8a%e8%af%b4%e6%98%8e">#&lt;/a>
&lt;/h2>
&lt;p>
 &lt;img src="https://note.jdscript.com/v1/file?id=10" alt="pstree进程树及说明" />&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/09/%E4%B8%BA%E4%BA%86%E4%BB%96%E6%98%AF%E8%87%AA%E5%B7%B1%E8%BD%AF%E5%BC%B1%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%9F%E5%8F%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/%E4%B8%BA%E4%BA%86%E4%BB%96%E6%98%AF%E8%87%AA%E5%B7%B1%E8%BD%AF%E5%BC%B1%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%9F%E5%8F%A3/</guid><description>&lt;p>软弱如绵羊，却生造出老虎护幼崽的形象，只需一句“都是为了他”。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/11/go_template_dot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/11/go_template_dot/</guid><description>&lt;p>dot: 在模板里表示为&lt;code>.&lt;/code>，表示当前作用域。&lt;/p>
&lt;p>&lt;code>{{range}}&lt;/code>, &lt;code>{{if}}&lt;/code>, &lt;code>{{with}}&lt;/code>均有自己的作用域。&lt;/p>
&lt;p>&lt;code>{{if pipeline}}&lt;/code>和&lt;code>{{with pipeline}}&lt;/code>的区别是，前者不会修改&lt;code>.&lt;/code>的值，而后者会。&lt;/p>
&lt;h2 id="with">
 with
 &lt;a class="anchor" href="#with">#&lt;/a>
&lt;/h2>
&lt;p>with设置&lt;code>.&lt;/code>的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#a6e22e">with&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>}} &lt;span style="color:#a6e22e">T1&lt;/span> {{&lt;span style="color:#a6e22e">end&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#a6e22e">with&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>}} &lt;span style="color:#a6e22e">T1&lt;/span> {{&lt;span style="color:#66d9ef">else&lt;/span>}} &lt;span style="color:#a6e22e">T0&lt;/span> {{&lt;span style="color:#a6e22e">end&lt;/span>}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当pipeline不为0值时，点&lt;code>.&lt;/code>&lt;strong>设置为pipeline运算的值&lt;/strong>，否则跳过。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>{{&lt;span style="color:#a6e22e">with&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>}} {{&lt;span style="color:#a6e22e">println&lt;/span> .}} {{&lt;span style="color:#a6e22e">end&lt;/span>}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2023/11/lllj/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/11/lllj/</guid><description>&lt;p>亮灯明途，
亮剑征服。
丽景慰人，
君芳抚世。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/11/%E4%B9%B0%E8%B5%8C%E6%8A%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/11/%E4%B9%B0%E8%B5%8C%E6%8A%A2/</guid><description>&lt;p>分-&amp;gt;买-&amp;gt;赌-&amp;gt;抢&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/11/%E5%90%91%E5%BE%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/11/%E5%90%91%E5%BE%80/</guid><description>&lt;h1 id="向往">
 向往
 &lt;a class="anchor" href="#%e5%90%91%e5%be%80">#&lt;/a>
&lt;/h1>
&lt;p>营造一个环境，演绎一段故事，打造一个向往。&lt;/p>
&lt;p>来使我消费。&lt;/p>
&lt;p>现实的边际效用低了，就用想象中的来补充。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/11/%E5%B1%95%E5%BC%80%E5%AE%8F%E4%BB%A5%E6%96%B9%E4%BE%BF%E9%98%85%E8%AF%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/11/%E5%B1%95%E5%BC%80%E5%AE%8F%E4%BB%A5%E6%96%B9%E4%BE%BF%E9%98%85%E8%AF%BB/</guid><description>&lt;h1 id="展开宏以方便阅读">
 展开宏以方便阅读
 &lt;a class="anchor" href="#%e5%b1%95%e5%bc%80%e5%ae%8f%e4%bb%a5%e6%96%b9%e4%be%bf%e9%98%85%e8%af%bb">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>gcc -E macro.c -o macro_expand.c&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>-E Preprocess only; do not compile, assemble or link.&lt;/p>
&lt;/blockquote>
&lt;p>macro.c:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SUM(a, b) ((a) + (b))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SUB(a, b) ((a) - (b))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">SUM&lt;/span>(a, b) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">SUB&lt;/span>(a, b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%d&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2023/11/%E7%90%86%E6%83%B3%E5%92%8C%E7%8E%B0%E5%AE%9E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/11/%E7%90%86%E6%83%B3%E5%92%8C%E7%8E%B0%E5%AE%9E/</guid><description>&lt;p>做的时候从现实出发，没人手、没时间、没资源，但是必须限期做出来；&amp;ndash; 死也死出来&lt;/p>
&lt;p>评的时候从理想出发，这里应该、那里必须，依然还有好多要优化。&amp;ndash; 这点东西不够看&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/do/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/do/</guid><description>&lt;h1 id="做">
 做
 &lt;a class="anchor" href="#%e5%81%9a">#&lt;/a>
&lt;/h1>
&lt;p>直到烦躁、厌倦。&lt;/p>
&lt;p>休息、转移。&lt;/p>
&lt;p>然后继续。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E5%8F%8C%E6%A0%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E5%8F%8C%E6%A0%87/</guid><description>&lt;h1 id="双标的进入">
 双标的进入
 &lt;a class="anchor" href="#%e5%8f%8c%e6%a0%87%e7%9a%84%e8%bf%9b%e5%85%a5">#&lt;/a>
&lt;/h1>
&lt;p>通过反问的方式来面对别人的质问。&lt;/p>
&lt;p>如果对方拒绝回答，只顾质问，就开始进入双标了。&lt;/p>
&lt;p>此时还讲道理，已无意义。&lt;/p>
&lt;p>发动情绪，更为明智。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E5%8F%96%E4%B8%8E%E4%BA%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E5%8F%96%E4%B8%8E%E4%BA%A4/</guid><description>&lt;p>一人向他人索取&lt;/p>
&lt;p>一人向他人提交&lt;/p>
&lt;p>他人向他人索取&lt;/p>
&lt;p>他人向他人征收&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E6%83%85%E6%99%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E6%83%85%E6%99%AF/</guid><description>&lt;p>和煦的风，轻抚岸边的你。&lt;/p>
&lt;p>生怕你不知，又怕被别人知道。&lt;/p>
&lt;p>叫唤多少声，才能引起你注意。跳跃多少次，才能吸引你目光。&lt;/p>
&lt;p>呱，呱呱······&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E6%9A%96%E5%BA%8A%E5%92%8C%E6%B3%A1%E6%B5%B4%E7%BC%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E6%9A%96%E5%BA%8A%E5%92%8C%E6%B3%A1%E6%B5%B4%E7%BC%B8/</guid><description>&lt;h1 id="docker和vm">
 docker和vm
 &lt;a class="anchor" href="#docker%e5%92%8cvm">#&lt;/a>
&lt;/h1>
&lt;p>&lt;code>docker&lt;/code>是暖床，把环境&lt;code>warmup&lt;/code>后，就离开了；&lt;/p>
&lt;p>&lt;code>vm&lt;/code>则是泡浴缸，得一直泡着。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E6%9C%AA%E6%9D%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E6%9C%AA%E6%9D%A5/</guid><description>&lt;h1 id="未来">
 未来
 &lt;a class="anchor" href="#%e6%9c%aa%e6%9d%a5">#&lt;/a>
&lt;/h1>
&lt;p>未来会是怎样，会有什么？&lt;/p>
&lt;p>我如何在未来生存、发展？&lt;/p>
&lt;h2 id="二极分化">
 二极分化
 &lt;a class="anchor" href="#%e4%ba%8c%e6%9e%81%e5%88%86%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;p>财富、心智、观念。&lt;/p>
&lt;p>分化加深，则意味着断层；断层则意味着落差。&lt;/p>
&lt;p>不小心的俯视，看到了令人作呕的景象，急忙躲闪；&lt;/p>
&lt;p>不小心的仰望，目睹了令人艳羡的风景，急忙刹车。&lt;/p>
&lt;p>左边是自己一样的厌恶，右边是别人一样的匆忙。&lt;/p>
&lt;p>想停下来，却没有落脚之地。想飞起来，找不到可行航线。&lt;/p>
&lt;p>枯萎、败亡、凋零。&lt;/p>
&lt;p>终于有了新花，忍不住包裹、装饰、密封，最后依然破落。&lt;/p>
&lt;p>新花说：“我想感受世界”。却终于被“保护”在铜墙铁壁，等待枯萎。&lt;/p>
&lt;p>越珍贵，越保护；越保护，越顽固。&lt;/p>
&lt;h2 id="活力">
 活力
 &lt;a class="anchor" href="#%e6%b4%bb%e5%8a%9b">#&lt;/a>
&lt;/h2>
&lt;p>做己所想，志趣之友。事尽心，人尽礼。辩理，尽情。&lt;/p>
&lt;p>图文音画展俗世，琴棋诗画诉衷肠。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E8%A7%84%E7%9F%A9%E7%9A%84%E8%AE%A2%E7%AB%8B%E5%92%8C%E6%89%A7%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E8%A7%84%E7%9F%A9%E7%9A%84%E8%AE%A2%E7%AB%8B%E5%92%8C%E6%89%A7%E8%A1%8C/</guid><description>&lt;p>规矩：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>名词&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>画圆形和方形的两种工具；比喻一定的标准、准则或惯例。
 「要按 规矩办事」&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>形容词&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>符合标准或常理；老实本分。&lt;/p>
&lt;/blockquote>
&lt;/blockquote>
&lt;p>何时订立、何时执行？&lt;/p>
&lt;p>何地订立、何地执行？&lt;/p>
&lt;p>何人订立、何人执行？&lt;/p>
&lt;p>如何订立、如何执行？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2023/12/%E9%A9%B1%E8%99%8E%E5%90%9E%E7%8B%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/12/%E9%A9%B1%E8%99%8E%E5%90%9E%E7%8B%BC/</guid><description>&lt;p>驱虎吞狼与驱狼吞虎&lt;/p>
&lt;p>什么能又驱虎，又驱狼呢？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/gopls-hightlight-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/gopls-hightlight-template/</guid><description>&lt;h1 id="gopls高亮template">
 Gopls高亮template
 &lt;a class="anchor" href="#gopls%e9%ab%98%e4%ba%aetemplate">#&lt;/a>
&lt;/h1>
&lt;h2 id="配置">
 配置
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gopls&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;templateExtensions&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tpl&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;tmpl&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ui.semanticTokens&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;files.associations&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;*.tpl&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;gotmpl&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;*.tmpl&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;gotmpl&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/01/vscode%E9%80%89%E4%B8%AD%E6%89%80%E6%9C%89%E5%8C%B9%E9%85%8D%E9%A1%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/vscode%E9%80%89%E4%B8%AD%E6%89%80%E6%9C%89%E5%8C%B9%E9%85%8D%E9%A1%B9/</guid><description>&lt;h1 id="vscode选中所有匹配项">
 vscode选中所有匹配项
 &lt;a class="anchor" href="#vscode%e9%80%89%e4%b8%ad%e6%89%80%e6%9c%89%e5%8c%b9%e9%85%8d%e9%a1%b9">#&lt;/a>
&lt;/h1>
&lt;p>快捷键：&lt;code>ctrl+shift+l&lt;/code>&lt;/p>
&lt;ul>
&lt;li>使用&lt;code>ctrl+f&lt;/code>，找到匹配内容后，使用上述快捷键即可将所有匹配内容选中。&lt;/li>
&lt;/ul></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/wsl2_config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/wsl2_config/</guid><description>&lt;h1 id="wsl2的一些配置">
 wsl2的一些配置
 &lt;a class="anchor" href="#wsl2%e7%9a%84%e4%b8%80%e4%ba%9b%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h1>
&lt;p>以下是在wsl虚拟机里面的配置&lt;/p>
&lt;h2 id="配置">
 配置
 &lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ cat /etc/wsl.conf 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>boot&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemd&lt;span style="color:#f92672">=&lt;/span>true &lt;span style="color:#75715e"># 启用systemd&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>interop&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>appendWindowsPath &lt;span style="color:#f92672">=&lt;/span> false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>network&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>generateResolvConf &lt;span style="color:#f92672">=&lt;/span> false &lt;span style="color:#75715e"># 关闭自动生成resolv.conf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/01/%E5%88%BA%E7%A0%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/%E5%88%BA%E7%A0%B4/</guid><description>&lt;h1 id="刺破的过程">
 刺破的过程
 &lt;a class="anchor" href="#%e5%88%ba%e7%a0%b4%e7%9a%84%e8%bf%87%e7%a8%8b">#&lt;/a>
&lt;/h1>
&lt;p>拥挤，互相推搡；&lt;/p>
&lt;p>往外走，发现气壁；&lt;/p>
&lt;p>尝试推，遭遇阻挠；&lt;/p>
&lt;p>用力打，鼻青脸肿；&lt;/p>
&lt;p>怎么办？陷入迷茫&amp;hellip;&lt;/p>
&lt;p>带路人，合力突刺。&lt;/p>
&lt;p>更多人，集齐元气！&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/%E5%A5%BD%E5%9D%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/%E5%A5%BD%E5%9D%8F/</guid><description>&lt;p>如果世界真的有好坏，那么坏人的猖狂就来源于好人的软弱。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8C%96/</guid><description>&lt;h1 id="模块化和服务化">
 模块化和服务化
 &lt;a class="anchor" href="#%e6%a8%a1%e5%9d%97%e5%8c%96%e5%92%8c%e6%9c%8d%e5%8a%a1%e5%8c%96">#&lt;/a>
&lt;/h1>
&lt;p>面向接口&lt;/p>
&lt;h2 id="模块化">
 模块化
 &lt;a class="anchor" href="#%e6%a8%a1%e5%9d%97%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">I&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">A&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">B&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">C&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="服务化">
 服务化
 &lt;a class="anchor" href="#%e6%9c%8d%e5%8a%a1%e5%8c%96">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>GET /user&lt;/code>&lt;/li>
&lt;li>&lt;code>POST /user&lt;/code>&lt;/li>
&lt;li>&lt;code>PUT /user&lt;/code>&lt;/li>
&lt;li>&lt;code>DELETE /user&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>在多人协作开发过程中，先定义接口，达到并行开发的目的。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/%E7%AE%97%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/%E7%AE%97%E6%95%B0/</guid><description>&lt;h1 id="算数">
 算数
 &lt;a class="anchor" href="#%e7%ae%97%e6%95%b0">#&lt;/a>
&lt;/h1>
&lt;ol start="0">
&lt;li>
&lt;p>定义（数）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算（数）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用（数）&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="期望和方差">
 期望和方差
 &lt;a class="anchor" href="#%e6%9c%9f%e6%9c%9b%e5%92%8c%e6%96%b9%e5%b7%ae">#&lt;/a>
&lt;/h2>
&lt;ol start="0">
&lt;li>定义&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>期望(Expectation)：度量一个随机变量取值的集中位置或平均水平。&lt;/p>
&lt;p>方差(Variance)：是表示随机变量取值的分散性的一个数字特征。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>怎么算？&lt;/li>
&lt;/ol>
&lt;p>
 &lt;img src="https://donnol.github.io/image/%e6%9c%9f%e6%9c%9b%e5%92%8c%e6%96%b9%e5%b7%ae%e5%85%ac%e5%bc%8f.png" alt="公式" />&lt;/p>
&lt;ol start="2">
&lt;li>怎么用？&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>方差越大，说明随机变量的取值分布越不均匀，变化性越强；方差越小，说明随机变量的取值越趋近于均值，即期望值。&lt;/p>
&lt;/blockquote></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/%E8%BD%AC%E5%90%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/%E8%BD%AC%E5%90%91/</guid><description>&lt;p>技术 -&amp;gt; 图文音画的技术
图文音画的技术 -&amp;gt; 内容&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/01/%E8%BD%AF%E5%BC%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/01/%E8%BD%AF%E5%BC%B1/</guid><description>&lt;h1 id="软弱">
 软弱
 &lt;a class="anchor" href="#%e8%bd%af%e5%bc%b1">#&lt;/a>
&lt;/h1>
&lt;p>容易被包装为心慈仁善，实则是放虎归山、助纣为虐。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/02/%E5%A8%81%E6%9C%9B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/02/%E5%A8%81%E6%9C%9B/</guid><description>&lt;h1 id="威望">
 威望
 &lt;a class="anchor" href="#%e5%a8%81%e6%9c%9b">#&lt;/a>
&lt;/h1>
&lt;p>权力、财富、名声。&lt;/p>
&lt;p>威望带来威亚。&lt;/p>
&lt;p>可以快速达成一致，也会阻碍想象和实践。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/02/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/02/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</guid><description>&lt;h1 id="排列组合">
 排列组合
 &lt;a class="anchor" href="#%e6%8e%92%e5%88%97%e7%bb%84%e5%90%88">#&lt;/a>
&lt;/h1>
&lt;p>可能出现的情况总数。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>排列：是指从给定个数的元素中取出指定个数的元素进行排序。&amp;ndash; n个中取m个，需要考虑排序：&lt;code>n!/(n-m)!&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>组合：是指从给定个数的元素中仅仅取出指定个数的元素，不考虑排序。&amp;ndash; n个中取m个，不考虑排序：&lt;code>n!/m!*(n-m)!&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="例如">
 例如
 &lt;a class="anchor" href="#%e4%be%8b%e5%a6%82">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>3个球里取1个，有多少种排列呢？根据公式有：&lt;code>3*2*1/2*1 = 3&lt;/code>，跟直觉一致。组合呢？根据公式有：&lt;code>3*2*1/1*2*1 = 3&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>当取1个的时候，排列和组合是一样的，因为此时&lt;code>m! = 1&lt;/code>.&lt;/p>
&lt;ol start="2">
&lt;li>3个球里取2个，排列：&lt;code>3*2*1/(3-2) = 6&lt;/code>; 组合：&lt;code>3*2*1/2*1*1 = 3&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>此时，排列数比组合数多。&lt;/p>
&lt;p>如果用A、B、C分别表示3个球，则排列情况有：&lt;code>AB、AC、BC、BA、CA、CB&lt;/code>；组合情况有：&lt;code>AB、AC、BC&lt;/code>。&lt;/p>
&lt;ol start="3">
&lt;li>当n和m都很大时，需要借助计算机来计算：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">factorial&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">s&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">factorial&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">factorial&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	println(&lt;span style="color:#e6db74">&amp;#34;10个取4个的排列&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>) &lt;span style="color:#75715e">// 10个取4个的排列 5040
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">factorial&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">factorial&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">factorial&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	println(&lt;span style="color:#e6db74">&amp;#34;10个取4个的组合&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>) &lt;span style="color:#75715e">// 10个取4个的组合 120960
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/02/%E7%89%A9%E6%9E%81%E5%BF%85%E5%8F%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/02/%E7%89%A9%E6%9E%81%E5%BF%85%E5%8F%8D/</guid><description>&lt;h1 id="物极必反">
 物极必反
 &lt;a class="anchor" href="#%e7%89%a9%e6%9e%81%e5%bf%85%e5%8f%8d">#&lt;/a>
&lt;/h1>
&lt;p>追求极限的方法：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>以人的意志，忽略自然规律。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尊重自然规律，科学寻找。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>尽情发挥想象力，实现时必须遵循规律。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/3.10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/3.10/</guid><description>&lt;p>昨天体验了一会自助购物。&lt;/p>
&lt;p>扫码开门、自助购物、扫码出门。&lt;/p>
&lt;p>可惜门开的时间稍短，稍不注意又要再扫一次。&lt;/p>
&lt;p>因为下着雨，也没注意哪里有胶袋。匆忙买完东西就得赶着送去了。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/ffmpeg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/ffmpeg/</guid><description>&lt;h1 id="ffmpeg">
 ffmpeg
 &lt;a class="anchor" href="#ffmpeg">#&lt;/a>
&lt;/h1>
&lt;h2 id="图片加水印">
 图片加水印
 &lt;a class="anchor" href="#%e5%9b%be%e7%89%87%e5%8a%a0%e6%b0%b4%e5%8d%b0">#&lt;/a>
&lt;/h2>
&lt;p>&lt;code>ffmpeg -i C:\Users\Pictures\1.png -vf &amp;quot;drawtext=fontfile=simhei.ttf:fontcolor=blue:fontsize=100:text='EGHI':x=W-tw-100:y=H-th-100:shadowy=2&amp;quot; C:\Users\Pictures\8x.jpg&lt;/code>&lt;/p>
&lt;h2 id="截图">
 截图
 &lt;a class="anchor" href="#%e6%88%aa%e5%9b%be">#&lt;/a>
&lt;/h2>
&lt;p>windows: &lt;code>ffmpeg -f gdigrab -s 500x500 -offset_x 100 -offset_y 100 -i desktop -frames:v 1 C:\Users\Pictures\screen.png&lt;/code>&lt;/p>
&lt;h2 id="录屏">
 录屏
 &lt;a class="anchor" href="#%e5%bd%95%e5%b1%8f">#&lt;/a>
&lt;/h2>
&lt;p>windows: &lt;code>ffmpeg -f gdigrab -framerate 20 -i desktop C:\Users\Pictures\out.avi&lt;/code>&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/match/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/match/</guid><description>&lt;h1 id="match">
 Match
 &lt;a class="anchor" href="#match">#&lt;/a>
&lt;/h1>
&lt;p>虚空克星：冰龙、骷髅王、毒狗、黑鸟……&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E4%B8%83%E6%97%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E4%B8%83%E6%97%A5/</guid><description>&lt;p>上5休2,5天里遇到4次无礼让，最后一次礼让。&lt;/p>
&lt;p>则习惯不礼让。&lt;/p>
&lt;p>所以，点样的人更多，就会有点样的习惯。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E4%B8%AD%E5%86%9B%E4%B9%8B%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E4%B8%AD%E5%86%9B%E4%B9%8B%E5%BF%97/</guid><description>&lt;h1 id="中军之志">
 中军之志
 &lt;a class="anchor" href="#%e4%b8%ad%e5%86%9b%e4%b9%8b%e5%bf%97">#&lt;/a>
&lt;/h1>
&lt;p>mark&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E5%85%B1%E6%80%A7%E5%92%8C%E4%B8%AA%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E5%85%B1%E6%80%A7%E5%92%8C%E4%B8%AA%E6%80%A7/</guid><description>&lt;h1 id="共性">
 共性
 &lt;a class="anchor" href="#%e5%85%b1%e6%80%a7">#&lt;/a>
&lt;/h1>
&lt;p>人物属性，天生造就。&lt;/p>
&lt;h1 id="个性">
 个性
 &lt;a class="anchor" href="#%e4%b8%aa%e6%80%a7">#&lt;/a>
&lt;/h1>
&lt;p>知行技能，后天培训。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E5%89%A5%E5%89%8A%E7%9A%84%E4%B8%A4%E6%9E%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E5%89%A5%E5%89%8A%E7%9A%84%E4%B8%A4%E6%9E%81/</guid><description>&lt;p>贵族、无赖。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E6%83%B3%E6%B3%95-%E5%AE%9E%E7%8E%B0-%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E6%83%B3%E6%B3%95-%E5%AE%9E%E7%8E%B0-%E4%BD%BF%E7%94%A8/</guid><description/></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E6%8B%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E6%8B%B3/</guid><description>&lt;ol>
&lt;li>
&lt;p>以子之矛攻子之盾&lt;/p>
&lt;/li>
&lt;li>
&lt;p>四两拨千斤&lt;/p>
&lt;/li>
&lt;li>
&lt;p>奋力死斗&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E6%97%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E6%97%A2/</guid><description>&lt;p>既不能早起，又不敢迟到。&lt;/p>
&lt;p>只好在扶梯上蹿下跳。&lt;/p>
&lt;p>活脱脱的兔子。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E6%9C%89%E6%83%B3%E6%B3%95-%E5%81%9A%E5%87%BA%E6%9D%A5-%E6%9C%89%E4%BA%BA%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E6%9C%89%E6%83%B3%E6%B3%95-%E5%81%9A%E5%87%BA%E6%9D%A5-%E6%9C%89%E4%BA%BA%E7%94%A8/</guid><description/></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E7%BB%99%E7%BC%96%E8%AF%91%E5%99%A8%E7%9C%8B%E7%9A%84-%E7%BB%99%E4%BA%BA%E7%9C%8B%E7%9A%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E7%BB%99%E7%BC%96%E8%AF%91%E5%99%A8%E7%9C%8B%E7%9A%84-%E7%BB%99%E4%BA%BA%E7%9C%8B%E7%9A%84/</guid><description/></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E8%8B%B1%E9%9B%84%E5%B0%8F%E5%85%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E8%8B%B1%E9%9B%84%E5%B0%8F%E5%85%B5/</guid><description>&lt;p>自我意识的觉醒、自我行为的实现，即为英雄。&lt;/p>
&lt;p>反之则是小兵。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/03/%E8%B6%85%E8%B5%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/03/%E8%B6%85%E8%B5%B6/</guid><description>&lt;h1 id="超赶">
 超赶
 &lt;a class="anchor" href="#%e8%b6%85%e8%b5%b6">#&lt;/a>
&lt;/h1>
&lt;p>一来就提超赶，不就承认自己落后了吗？&lt;/p>
&lt;p>而且必须跟在别人屁股后面，屁颠屁颠的追赶。&lt;/p>
&lt;p>后面发现&lt;code>跟&lt;/code>不合适，进而出来了&lt;code>弯道超车&lt;/code>。&lt;/p>
&lt;p>再来就是遥遥领先了。&lt;/p>
&lt;p>既然领先了，为什么还是那么焦虑？&lt;/p>
&lt;p>因为又害怕被别人超赶了。&lt;/p>
&lt;p>所以竞争到底是为了什么，为了焦虑，还是为了享受。&lt;/p>
&lt;p>还是为了自己享受，让别人焦虑呢？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/oneline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/oneline/</guid><description>&lt;h1 id="一行">
 一行
 &lt;a class="anchor" href="#%e4%b8%80%e8%a1%8c">#&lt;/a>
&lt;/h1>
&lt;p>怎么样的一行才是好的&lt;code>OneLineCode&lt;/code>呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>a().&lt;span style="color:#66d9ef">await&lt;/span>.b()&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#66d9ef">match&lt;/span>{Some(x) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> x&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>}.c()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">try&lt;/span> a().b().c()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">A&lt;/span>().&lt;span style="color:#a6e22e">B&lt;/span>().&lt;span style="color:#a6e22e">C&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/procfile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/procfile/</guid><description>&lt;p>ls /proc/58607&lt;/p>
&lt;p>
 &lt;a href="https://man7.org/linux/man-pages/man5/proc.5.html">manual&lt;/a>&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">文件名&lt;/th>
 &lt;th style="text-align: left">内容&lt;/th>
 &lt;th style="text-align: left">是否需要root权限&lt;/th>
 &lt;th style="text-align: left">说明&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">arch_status&lt;/td>
 &lt;td style="text-align: left">空&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">clear_refs&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">需&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">cpuset&lt;/td>
 &lt;td style="text-align: left">/&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">fd&lt;/td>
 &lt;td style="text-align: left">文件描述符目录，里面有名称为0~18的链接文件&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">limits&lt;/td>
 &lt;td style="text-align: left">四列数据：Limit, Soft Limit, Hard Limit, Units，关于cpu, 文件, 栈等配额信息&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">mem&lt;/td>
 &lt;td style="text-align: left">cat: /proc/58607/mem: Input/output error&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">net&lt;/td>
 &lt;td style="text-align: left">目录，有各种协议的文件: tcp, udp, icmp&amp;hellip;&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">oom_score_adj&lt;/td>
 &lt;td style="text-align: left">0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">root&lt;/td>
 &lt;td style="text-align: left">目录，指向系统根目录的链接&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">setgroups&lt;/td>
 &lt;td style="text-align: left">allow&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">stat&lt;/td>
 &lt;td style="text-align: left">58607 (jdmgr) S 58382 58382 9872 34820 58382 1077936128 6387 0 26 0 6552 6932 0 0 20 0 15 0 95648476 1838948352 11496 18446744073709551615 4300800 25256385 140731858714304 0 0 0 0 0 2143420159 0 0 0 17 8 0 0 0 0 0 49557040 50499008 83853312 140731858719703 140731858719777 140731858719777 140731858722800 0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">task&lt;/td>
 &lt;td style="text-align: left">目录，里面的子目录与本进程的目录结构类似&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">uid_map&lt;/td>
 &lt;td style="text-align: left">0 0 4294967295&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">attr&lt;/td>
 &lt;td style="text-align: left">目录，里面有：current, execr, fscreate, keycreate, prev, sockcreate&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">cmdline&lt;/td>
 &lt;td style="text-align: left">./jdmgr&amp;ndash;config=/home/jd/Project/jdmgr/data/conf/jdmgr-local.tomlserver&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">cwd&lt;/td>
 &lt;td style="text-align: left">目录，里面有启动进程所在目录的文件&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">fdinfo&lt;/td>
 &lt;td style="text-align: left">目录，里面有名称为0~18的文件，每个文件里有以下信息：pos, flags, mnt_id, ino&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">loginuid&lt;/td>
 &lt;td style="text-align: left">4294967295&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">mountinfo&lt;/td>
 &lt;td style="text-align: left">磁盘挂载情况&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">ns&lt;/td>
 &lt;td style="text-align: left">目录，里面有：cgroup, net, time, uts, ipc, pid, time_for_children, mnt, pid_for_children, user&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">pagemap&lt;/td>
 &lt;td style="text-align: left">一堆问号&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">sched&lt;/td>
 &lt;td style="text-align: left">jdmgr (58607, #threads: 15) 和一系列键值&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">smaps&lt;/td>
 &lt;td style="text-align: left">很多键值数据&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">statm&lt;/td>
 &lt;td style="text-align: left">448962 11467 6999 5117 0 46089 0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">timens_offsets&lt;/td>
 &lt;td style="text-align: left">monotonic 0 0; boottime 0 0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">wchan&lt;/td>
 &lt;td style="text-align: left">futex_wait_queue_me&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">auxv&lt;/td>
 &lt;td style="text-align: left">一堆问号&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">comm&lt;/td>
 &lt;td style="text-align: left">jdmgr&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">environ&lt;/td>
 &lt;td style="text-align: left">环境变量&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">gid_map&lt;/td>
 &lt;td style="text-align: left">0 0 4294967295&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">map_files&lt;/td>
 &lt;td style="text-align: left">目录&lt;/td>
 &lt;td style="text-align: left">需&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">mounts&lt;/td>
 &lt;td style="text-align: left">挂载情况：none /mnt/wsl tmpfs rw,relatime 0 0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">oom_adj&lt;/td>
 &lt;td style="text-align: left">0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">personality&lt;/td>
 &lt;td style="text-align: left">00000000&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">schedstat&lt;/td>
 &lt;td style="text-align: left">14831015600 63888900 226226&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">smaps_rollup&lt;/td>
 &lt;td style="text-align: left">一系列键值：Rss: 47844 kB;Pss: 47781 kB;&amp;hellip;&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">status&lt;/td>
 &lt;td style="text-align: left">Name: jdmgr; Umask: 0022; State: S (sleeping); Tgid: 58607&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">timers&lt;/td>
 &lt;td style="text-align: left">空&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">cgroup&lt;/td>
 &lt;td style="text-align: left">15:name=systemd:/; 14:misc:/; 13:rdma:/; 12:pids:/; 11:hugetlb:/; 10:net_prio:/; 9:perf_event:/; 8:net_cls:/; 7:freezer:/; 6:devices:/; 5:memory:/; 4:blkio:/; 3:cpuacct:/; 2:cpu:/; 1:cpuset:/; 0::/&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">coredump_filter&lt;/td>
 &lt;td style="text-align: left">00000033&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">exe&lt;/td>
 &lt;td style="text-align: left">一堆问号&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">io&lt;/td>
 &lt;td style="text-align: left">rchar: 65191135; wchar: 10478455; syscr: 668811; syscw: 233308; read_bytes: 352256; write_bytes: 1781760; cancelled_write_bytes: 0&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">maps&lt;/td>
 &lt;td style="text-align: left">00400000-0041a000 r&amp;ndash;p 00000000 08:20 2198269 /home/jd/Project/jdmgr/jdmgr; &amp;hellip;&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">mountstats&lt;/td>
 &lt;td style="text-align: left">device none mounted on /mnt/wsl with fstype tmpfs; &amp;hellip;&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">oom_score&lt;/td>
 &lt;td style="text-align: left">668&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">projid_map&lt;/td>
 &lt;td style="text-align: left">0 0 4294967295&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">sessionid&lt;/td>
 &lt;td style="text-align: left">4294967295&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">stack&lt;/td>
 &lt;td style="text-align: left">[&amp;lt;0&amp;gt;] do_epoll_wait+0x5ce/0x710; [&amp;lt;0&amp;gt;] do_compat_epoll_pwait.part.0+0xe/0x80; [&amp;lt;0&amp;gt;] __x64_sys_epoll_pwait+0x7f/0x130; [&amp;lt;0&amp;gt;] do_syscall_64+0x38/0xc0; [&amp;lt;0&amp;gt;] entry_SYSCALL_64_after_hwframe+0x62/0xcc&lt;/td>
 &lt;td style="text-align: left">需&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">syscall&lt;/td>
 &lt;td style="text-align: left">202 0x303c728 0x80 0x0 0x0 0x0 0x0 0x7ffeb0727b10 0x48d183&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">timerslack_ns&lt;/td>
 &lt;td style="text-align: left">50000&lt;/td>
 &lt;td style="text-align: left">需&lt;/td>
 &lt;td style="text-align: left">&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E4%BA%B2%E7%96%8F%E4%B9%8B%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E4%BA%B2%E7%96%8F%E4%B9%8B%E5%88%AB/</guid><description>&lt;p>亲则同，疏则异。&lt;/p>
&lt;p>同声同气好说话，异口同声有诡计。&lt;/p>
&lt;p>索性不改继续用，除非大变在眼前。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>&lt;p>将循环执行过程中的阶段结果保存到数组里以供后续执行使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">DP&lt;/span>[&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">R&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>](&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">list&lt;/span> []&lt;span style="color:#a6e22e">T&lt;/span>, &lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">T&lt;/span>) &lt;span style="color:#a6e22e">R&lt;/span>) &lt;span style="color:#a6e22e">R&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#a6e22e">R&lt;/span>, len(&lt;span style="color:#a6e22e">list&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// exec and save result to s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">n&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E5%A5%BD%E6%97%B6%E4%BB%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E5%A5%BD%E6%97%B6%E4%BB%A3/</guid><description>&lt;p>怎样可谓之好时代，&lt;/p>
&lt;p>好时代是怎么来，又怎么去的呢？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E5%B0%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E5%B0%B1/</guid><description>&lt;p>想看就看，想吹就吹，想喷就喷，想做就想。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E5%BB%BA%E8%AE%BE%E8%BF%98%E6%98%AF%E7%A0%B4%E5%9D%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E5%BB%BA%E8%AE%BE%E8%BF%98%E6%98%AF%E7%A0%B4%E5%9D%8F/</guid><description>&lt;p>搞建设能来钱，搞破坏也可以。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E6%94%B6%E5%85%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E6%94%B6%E5%85%A5/</guid><description>&lt;p>挣也好，亏也好，必须要有收入；&lt;/p>
&lt;p>没收入就什么都没了。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E6%97%A0%E7%A9%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E6%97%A0%E7%A9%B7/</guid><description>&lt;p>都要自杀了，为什么不敢干它？&lt;/p>
&lt;p>都要在70岁时去打螺丝了，为什么不敢干它？&lt;/p>
&lt;p>都要在60岁时去打螺丝了，为什么不敢干它？&lt;/p>
&lt;p>都要在50岁时去打螺丝了，为什么不敢干它？
都要在40岁时去打螺丝了，为什么不敢干它？
都要在30岁时去打螺丝了，为什么不敢干它？
都要在20岁时去打螺丝了，为什么不敢干它？&lt;/p>
&lt;p>不敢就是不敢，问再多就是不敢。&lt;/p>
&lt;p>当然，也有比较“高尚的”：只找自己原因，不找外界原因。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E6%97%B6%E7%A9%BA%E4%BA%BA%E7%89%A9%E4%BA%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E6%97%B6%E7%A9%BA%E4%BA%BA%E7%89%A9%E4%BA%8B/</guid><description>&lt;p>时刻、时长；时效、时延。&lt;/p>
&lt;p>空间、空挡；空缺、空白。&lt;/p>
&lt;p>人体、人性；人选、人际。&lt;/p>
&lt;p>物体、物品；物质、物流。&lt;/p>
&lt;p>事情、事业；事务、事实。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E6%B6%88%E9%81%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E6%B6%88%E9%81%A3/</guid><description>&lt;p>有闲有钱有消遣，无钱有闲也消遣。&lt;/p>
&lt;p>总会得闲去消遣，消遣供应永不够。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E6%BB%A1%E8%B6%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E6%BB%A1%E8%B6%B3/</guid><description>&lt;p>吃喝玩乐，直到满足。&lt;/p>
&lt;p>慢慢漏失，重新再来。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%86%AC%E5%A4%9C%E6%89%93%E6%B8%B8%E6%88%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%86%AC%E5%A4%9C%E6%89%93%E6%B8%B8%E6%88%8F/</guid><description>&lt;p>打游戏就打游戏，为什么非得熬夜呢？&lt;/p>
&lt;p>怕打完这次就没下次了，所以这么拼命？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%9F%A5%E8%AF%86-%E9%BB%84%E9%87%91-%E6%AD%A6%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%9F%A5%E8%AF%86-%E9%BB%84%E9%87%91-%E6%AD%A6%E5%99%A8/</guid><description>&lt;p>失去了这三个，则失去了全部。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%A4%BE%E4%BC%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%A4%BE%E4%BC%9A/</guid><description>&lt;p>意见不一定对，但声音很重要。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%A8%B3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%A8%B3/</guid><description>&lt;p>逆水行舟怎么稳，稍有不慎不单不进还退。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%A9%BA%E9%A5%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%A9%BA%E9%A5%B7/</guid><description>&lt;p>多劳多得，少劳少得。&lt;/p>
&lt;p>空饷，则是不劳多得。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%AE%A1%E7%90%86/</guid><description>&lt;p>利用已有的资源&lt;code>达成&lt;/code>所要的效果。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E7%BC%96%E5%AF%BC%E6%BC%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E7%BC%96%E5%AF%BC%E6%BC%94/</guid><description>&lt;p>编、导、演。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E8%87%AA%E6%88%91%E8%B4%AC%E4%BD%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E8%87%AA%E6%88%91%E8%B4%AC%E4%BD%8E/</guid><description>&lt;p>威压使得所有人自我怀疑，自我贬低，自我伤害。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E8%8C%A7%E6%88%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E8%8C%A7%E6%88%BF/</guid><description>&lt;p>铺天盖地，层层封胶，环环相扣。&lt;/p>
&lt;p>如此严密控制，为了决策时的任性、出错后的免责。&lt;/p>
&lt;p>迷信权威，又被权威愚弄。&lt;/p>
&lt;p>怎样才是一个好的氛围呢？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E8%8E%BD%E7%AD%89%E5%86%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E8%8E%BD%E7%AD%89%E5%86%B2/</guid><description>&lt;p>一代人的跟，换一代人的莽；&lt;/p>
&lt;p>一代人的莽，换一代人的等；&lt;/p>
&lt;p>一代人的等，换一代人的冲。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E8%AE%A4%E7%88%B6%E5%B0%81%E7%A5%9E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E8%AE%A4%E7%88%B6%E5%B0%81%E7%A5%9E/</guid><description>&lt;p>认贼作父，求神拜佛。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E9%94%99%E8%AF%AF%E6%81%A2%E5%A4%8D-%E4%BA%89%E6%89%A7%E6%81%A2%E5%A4%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E9%94%99%E8%AF%AF%E6%81%A2%E5%A4%8D-%E4%BA%89%E6%89%A7%E6%81%A2%E5%A4%8D/</guid><description>&lt;p>错误可以恢复，恐慌不行；&lt;/p>
&lt;p>争执可以恢复，背刺不行。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/04/%E9%9A%8F%E7%BC%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/04/%E9%9A%8F%E7%BC%98/</guid><description>&lt;p>你你我我随缘曾邂逅，笑笑喊喊想起总荒谬。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/go-iter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/go-iter/</guid><description>&lt;h1 id="go-range-over-func">
 Go range over func
 &lt;a class="anchor" href="#go-range-over-func">#&lt;/a>
&lt;/h1>
&lt;p>
 &lt;a href="https://go.dev/play/p/BR1sVgX_ZSn?v=gotip">Play&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// You can edit this code!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Click here and start typing.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#e6db74">&amp;#34;iter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#a6e22e">iter&lt;/span>.&lt;span style="color:#a6e22e">Seq&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">yield&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">yield&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Tree is a binary tree.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#a6e22e">E&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>] &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#a6e22e">E&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">left&lt;/span>, &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#a6e22e">E&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// All may be used in a for/range loop to iterate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// through all the values of the tree.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// This implementation does an in-order traversal.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#a6e22e">E&lt;/span>]) &lt;span style="color:#a6e22e">All&lt;/span>(&lt;span style="color:#a6e22e">yield&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">E&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">doAll&lt;/span>(&lt;span style="color:#a6e22e">yield&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// doAll is a helper for All, to make it easier
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// to know when the iteration stopped in a subtree.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#a6e22e">E&lt;/span>]) &lt;span style="color:#a6e22e">doAll&lt;/span>(&lt;span style="color:#a6e22e">yield&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">E&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">left&lt;/span>.&lt;span style="color:#a6e22e">doAll&lt;/span>(&lt;span style="color:#a6e22e">yield&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">yield&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">val&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">right&lt;/span>.&lt;span style="color:#a6e22e">doAll&lt;/span>(&lt;span style="color:#a6e22e">yield&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SumTree&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">All&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">SumTreeSeq&lt;/span>(&lt;span style="color:#a6e22e">seq&lt;/span> &lt;span style="color:#a6e22e">iter&lt;/span>.&lt;span style="color:#a6e22e">Seq&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">seq&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, 世界&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// 函数body会被转为yield函数传入到iter.Seq里 -- 当`body`没有控制流语句时，一律视为`return true`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">// 请注意，这里的defer不会被移入yield函数里，而是会保留在本函数内
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>		&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;defer2&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;defer&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">k&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">val&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">left&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]{&lt;span style="color:#a6e22e">val&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a6e22e">right&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Tree&lt;/span>[&lt;span style="color:#66d9ef">int&lt;/span>]{&lt;span style="color:#a6e22e">val&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">SumTree&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">SumTreeSeq&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">All&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E5%8D%B7%E7%A7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E5%8D%B7%E7%A7%AF/</guid><description>&lt;p>
 &lt;a href="https://www.zhihu.com/question/22298352/answer/1071892762">如何通俗易懂地解释卷积？ - 1335的回答&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>作用速度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>作用效果&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>一个对象（本文中的吃冰淇凌）对一个系统（本文中的体重）的作用效果满足线性原理、累加原理。&lt;/p>
&lt;p>该对象对这个系统连续作用了一段时间后，求该系统的状态。&lt;/p>
&lt;p>这个时候，一个卷积就可以求出来了！&lt;/p>
&lt;p>在卷积 &lt;code>W(T)=integral(g(τ)f(T−τ), 0, T)&lt;/code> 中，&lt;/p>
&lt;p>第一个函数 表示这个对象对系统的作用速度。&lt;/p>
&lt;p>第二个函数 表示当作用速度为单位冲击函数时这个对象对系统的作用效果。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E5%BC%BA%E5%BA%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E5%BC%BA%E5%BA%A6/</guid><description>&lt;p>竞技：主动/被动地在极短时间内将强度提高。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E6%81%A9%E5%A8%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E6%81%A9%E5%A8%81/</guid><description>&lt;p>恩威、奖惩、权责&lt;/p>
&lt;p>无威不听，无恩不动。&lt;/p>
&lt;p>阳奉阴违，变本加厉。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E6%9D%83%E5%88%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E6%9D%83%E5%88%A9/</guid><description>&lt;p>在别人攻城略地的同时，选择步步退让，自我安慰再让一步就会好起来。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E6%B1%82%E5%AE%9E%E5%8A%A1%E8%99%9A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E6%B1%82%E5%AE%9E%E5%8A%A1%E8%99%9A/</guid><description>&lt;p>求实，则新变化从容应对；&lt;/p>
&lt;p>务虚，则大祸临无所适从。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E6%BC%A0%E8%A7%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E6%BC%A0%E8%A7%86/</guid><description>&lt;p>对它，对他，对她，对TA；&lt;/p>
&lt;p>对己，对挤，对急，对纪。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E7%9F%9B%E7%9B%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E7%9F%9B%E7%9B%BE/</guid><description>&lt;p>个性化必然导致矛盾，&lt;/p>
&lt;p>自然法则必然导致个性化。&lt;/p>
&lt;p>矛盾必然存在的话，怎么缓解、怎么解决呢？&lt;/p>
&lt;p>略之？惑之？堵之？疏之？灭之？解之？&lt;/p>
&lt;p>可问题是，你有得选吗！&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E7%AE%80%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E7%AE%80%E5%8C%96/</guid><description>&lt;p>简化是一种本事，也是一种病。&lt;/p>
&lt;p>为了简化，逐渐失真、扭曲、捏造。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E7%BB%9F%E6%B2%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E7%BB%9F%E6%B2%BB/</guid><description>&lt;p>任何统治要想长期&lt;code>维系&lt;/code>，都必须要从统治行为中&lt;code>获益&lt;/code>，就算统治者本人无欲无求也一样，否则统治本身无法维系。&lt;/p>
&lt;p>而统治者的&lt;code>收益&lt;/code>，都来自于对被统治者经济价值的&lt;code>盘剥&lt;/code>。&lt;/p>
&lt;p>所以，要有效地瓦解统治行为，其中一个就是消除被统治者的经济价值。&lt;/p>
&lt;p>被统治者以低成本的方式拉高统治者的统治成本，降低统治者的统治收益，拒绝配合统治者的统治行为，从而使其统治难以为继。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E8%A1%8C/</guid><description>&lt;ol>
&lt;li>
&lt;p>每一次行动都全力以赴；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每一次行动都硕果累累。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title/><link>https://donnol.github.io/posts/2024/05/%E9%99%B7%E9%98%B1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/05/%E9%99%B7%E9%98%B1/</guid><description>&lt;p>掉入陷阱，而不自知。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/06/vscode-go-version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/vscode-go-version/</guid><description>&lt;h2 id="vscode里为不同项目配置不同的go版本">
 &lt;code>vscode&lt;/code>里为不同项目配置不同的&lt;code>Go&lt;/code>版本
 &lt;a class="anchor" href="#vscode%e9%87%8c%e4%b8%ba%e4%b8%8d%e5%90%8c%e9%a1%b9%e7%9b%ae%e9%85%8d%e7%bd%ae%e4%b8%8d%e5%90%8c%e7%9a%84go%e7%89%88%e6%9c%ac">#&lt;/a>
&lt;/h2>
&lt;p>在项目根目录里添加&lt;code>.vscode/settings.json&lt;/code>，并添加如下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;go.goroot&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/local/go1.22.2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;go.alternateTools&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;go&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/local/go1.22.2/bin/go&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;gopls&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;build.env&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;GOROOT&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/usr/local/go1.22.2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E5%B7%A5%E5%8E%82%E5%92%8C%E4%BD%9C%E5%9D%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E5%B7%A5%E5%8E%82%E5%92%8C%E4%BD%9C%E5%9D%8A/</guid><description>&lt;p>分工明确，各司其职；&lt;/p>
&lt;p>混乱重叠，前后不一。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E5%BC%AF%E9%81%93%E8%B6%85%E8%BD%A6%E5%92%8C%E4%BC%BA%E6%9C%BA%E8%B6%85%E8%B6%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E5%BC%AF%E9%81%93%E8%B6%85%E8%BD%A6%E5%92%8C%E4%BC%BA%E6%9C%BA%E8%B6%85%E8%B6%8A/</guid><description>&lt;p>一个是急得焦躁，一个是稳中求变。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%9D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%9D%97/</guid><description>&lt;p>接口抽象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Eat&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Sleep&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现分块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">cat&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cat&lt;/span>) &lt;span style="color:#a6e22e">Eat&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// after
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cat&lt;/span>) &lt;span style="color:#a6e22e">Sleep&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// after
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cat&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// before
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// after
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BD%91%E7%BB%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BD%91%E7%BB%9C/</guid><description>&lt;p>数据：data&lt;/p>
&lt;p>网络：net&lt;/p>
&lt;p>展示：view&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E6%9C%BA%E5%88%B6%E5%92%8C%E7%AD%96%E7%95%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E6%9C%BA%E5%88%B6%E5%92%8C%E7%AD%96%E7%95%A5/</guid><description>&lt;p>机制：如何做？&lt;/p>
&lt;p>策略：做什么，何时做？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Policy&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mechanisms&lt;/span> []&lt;span style="color:#a6e22e">Mechanism&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Policy&lt;/span>) &lt;span style="color:#a6e22e">Do&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">mechanisms&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">Before&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">After&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Mechanism&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Before&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">After&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">mechanism&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">mechanism&lt;/span>) &lt;span style="color:#a6e22e">Before&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">mechanism&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">mechanism&lt;/span>) &lt;span style="color:#a6e22e">After&lt;/span>() {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E6%9D%83%E8%B4%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E6%9D%83%E8%B4%A3/</guid><description>&lt;p>是非不分、奖罚不明、权责不等。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E6%B0%B4%E5%9C%9F%E4%B8%8E%E4%BA%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E6%B0%B4%E5%9C%9F%E4%B8%8E%E4%BA%BA/</guid><description>&lt;p>一方水土养育一方人，&lt;/p>
&lt;p>一方人制造一方水土。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/06/%E8%87%B4%E6%95%AC%E5%92%8C%E8%BF%BD%E9%9A%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/06/%E8%87%B4%E6%95%AC%E5%92%8C%E8%BF%BD%E9%9A%8F/</guid><description>&lt;p>说一两句好听的话，做一两件认可的事。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/07/%E4%B8%93%E5%88%B6%E5%92%8C%E7%A7%91%E5%AD%A6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/07/%E4%B8%93%E5%88%B6%E5%92%8C%E7%A7%91%E5%AD%A6/</guid><description>&lt;p>专制时有科学，科学时有专制吗？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/07/%E5%80%BC%E4%B8%8E%E4%B8%8D%E5%80%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/07/%E5%80%BC%E4%B8%8E%E4%B8%8D%E5%80%BC/</guid><description>&lt;p>值还是不值&lt;/p>
&lt;p>认为值就奋不顾身；认为不值就静观其变。&lt;/p>
&lt;p>营造值的氛围，加大值的得益，赚取值的利润。&lt;/p>
&lt;p>用什么来营造呢？&lt;/p>
&lt;p>爱国、爱族、爱人、爱己。&lt;/p>
&lt;p>造一个舆论，引一群羔羊。&lt;/p>
&lt;p>煮一锅鲜汤，添一把烧柴。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/07/%E5%AE%9E%E4%BA%8B%E6%B1%82%E6%98%AF%E5%92%8C%E5%AF%BB%E6%A0%B9%E9%97%AE%E5%BA%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/07/%E5%AE%9E%E4%BA%8B%E6%B1%82%E6%98%AF%E5%92%8C%E5%AF%BB%E6%A0%B9%E9%97%AE%E5%BA%95/</guid><description>&lt;p>科学&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/07/%E7%94%B3%E8%AF%B7%E4%BD%BF%E7%94%A8%E6%B8%85%E6%B4%97%E9%87%8A%E6%94%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/07/%E7%94%B3%E8%AF%B7%E4%BD%BF%E7%94%A8%E6%B8%85%E6%B4%97%E9%87%8A%E6%94%BE/</guid><description>&lt;p>life:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>申请&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清洗&lt;/p>
&lt;/li>
&lt;li>
&lt;p>释放&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://donnol.github.io/posts/2024/08/go-error-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/go-error-check/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Call&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#a6e22e">any&lt;/span>) (&lt;span style="color:#a6e22e">any&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">check&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#75715e">// if err != nil { return }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Nomarlly, `check` will return if err != nil, it will continue if err == nil.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the `return` will auto match the function&amp;#39;s result
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If we want to handle err, we can use a code block to do that.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">check&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> { &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;call failed: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>) } &lt;span style="color:#75715e">// print error and continue, because no `return` in block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">check&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> { &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;call failed: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>); &lt;span style="color:#66d9ef">return&lt;/span> } &lt;span style="color:#75715e">// print error and return, because `return` in block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">d&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">check&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> { &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;call failed: %w&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>); &lt;span style="color:#66d9ef">return&lt;/span> } &lt;span style="color:#75715e">// wrap error and return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#a6e22e">e&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">check&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> { panic(&lt;span style="color:#a6e22e">err&lt;/span>) } &lt;span style="color:#75715e">// panic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pr</description></item><item><title/><link>https://donnol.github.io/posts/2024/08/%E5%8D%8A%E7%9C%9F%E5%8D%8A%E5%81%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/%E5%8D%8A%E7%9C%9F%E5%8D%8A%E5%81%87/</guid><description>&lt;p>半真半假糊弄学，&lt;/p>
&lt;p>伪造作假交差学。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/08/%E5%9B%BD%E5%AE%B6%E4%BC%9A%E5%87%BA%E6%89%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/%E5%9B%BD%E5%AE%B6%E4%BC%9A%E5%87%BA%E6%89%8B/</guid><description>&lt;p>潜台词是：继续当个忍者吧！&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/08/%E5%A5%89%E7%8C%AE%E7%89%BA%E7%89%B2%E5%BF%8D%E8%80%90%E4%BB%A3%E4%BB%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/%E5%A5%89%E7%8C%AE%E7%89%BA%E7%89%B2%E5%BF%8D%E8%80%90%E4%BB%A3%E4%BB%B7/</guid><description>&lt;p>奉献一下，牺牲一下，忍耐一下，&lt;/p>
&lt;p>谁的代价？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/08/%E6%A8%A1%E5%9D%97%E5%8C%96-%E4%BE%9D%E8%B5%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/%E6%A8%A1%E5%9D%97%E5%8C%96-%E4%BE%9D%E8%B5%96/</guid><description>&lt;p>&lt;code>模块化&lt;/code>使得&lt;code>复用&lt;/code>更容易，也会带来&lt;code>依赖&lt;/code>的问题。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>全局依赖和局部依赖&lt;/p>
&lt;/li>
&lt;li>
&lt;p>技术依赖和业务依赖&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title/><link>https://donnol.github.io/posts/2024/08/%E7%8E%AF%E5%A2%83%E4%B8%8E%E4%BA%BA%E7%89%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/%E7%8E%AF%E5%A2%83%E4%B8%8E%E4%BA%BA%E7%89%A9/</guid><description>&lt;p>人或物生活的地方，叫环境，有家庭、社会、学校、公司、商场。&lt;/p>
&lt;p>活在其中，可以改造它，亦会受它影响。&lt;/p>
&lt;p>太差而又改造不动，为何不换一个。&lt;/p>
&lt;p>环境换人，人换环境，莫不如是。&lt;/p>
&lt;p>生于淮北则为枳，生于淮南则为橘。&lt;/p>
&lt;p>物挪则死，人挪则活。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/08/%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%89%A7%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/08/%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%89%A7%E8%A1%8C/</guid><description>&lt;p>制度设计和实施执行&lt;/p>
&lt;p>边个重要？&lt;/p>
&lt;p>共识重要。&lt;/p>
&lt;p>人设计的，人执行的。&lt;/p>
&lt;p>设计的做得很好，执行的也做得很好。&lt;/p>
&lt;p>怎么选择设计的人，怎么选择执行的人。&lt;/p>
&lt;p>设计的人做得不好，或者执行的人做得不好，边个知？边个定？&lt;/p>
&lt;p>做得不好，怎么办？&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/09/%E6%8E%A8%E6%BC%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/09/%E6%8E%A8%E6%BC%94/</guid><description>&lt;p>推理和演化&lt;/p>
&lt;p>在设计时，推算流程，理清线索。&lt;/p>
&lt;p>演化，将可能出现的多种情况思索一番，寻找其中能更好持续执行的一种。&lt;/p>
&lt;p>最优路径，在起点和终点的多条路径之中，选择&lt;code>路程最短/耗时最少/花费最少/...&lt;/code>的路径。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/09/%E7%89%B9%E6%9D%83%E6%91%A7%E6%AF%81%E8%A7%84%E7%9F%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/09/%E7%89%B9%E6%9D%83%E6%91%A7%E6%AF%81%E8%A7%84%E7%9F%A9/</guid><description>&lt;p>在有规矩的时候有人无需遵守，规矩自然就被摧毁了。&lt;/p></description></item><item><title/><link>https://donnol.github.io/posts/2024/09/%E8%87%AA%E7%84%B6%E8%A7%84%E5%BE%8B%E5%92%8C%E5%B8%82%E5%9C%BA%E8%A7%84%E5%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2024/09/%E8%87%AA%E7%84%B6%E8%A7%84%E5%BE%8B%E5%92%8C%E5%B8%82%E5%9C%BA%E8%A7%84%E5%BE%8B/</guid><description>&lt;p>探索它，基于它，制定它。&lt;/p></description></item></channel></rss>