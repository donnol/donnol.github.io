<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02 on 我的简单博客</title><link>https://donnol.github.io/posts/2022/02/</link><description>Recent content in 02 on 我的简单博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 18 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/posts/2022/02/index.xml" rel="self" type="application/rss+xml"/><item><title>霜之哀伤</title><link>https://donnol.github.io/posts/2022/02/%E9%9C%9C%E4%B9%8B%E5%93%80%E4%BC%A4/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/%E9%9C%9C%E4%B9%8B%E5%93%80%E4%BC%A4/</guid><description>当有人说要在屋里开个窗，一定惹得大伙不开心，无人同意；若要在屋里凿个洞，就有人来协调，愿意开窗了。
看到了吗？这里面有提议的人，有反对的人，有开始反对后面协调的人。看似只有这几种人，实则还有一种人，哪边人多站哪边。恶则落井下石，善则“好言相劝”。
一盆散沙，就算反对，也难以“碍事”。聪明人早就明白这个道理。只要能裹挟着一群人，与自己利益捆绑，那么就能为己所用。至于“所用”是何物，自然无关紧要，只要“为己”即可。
同样地，要击溃捆绑，自然需要强大的力量，也就是另一群人。</description></item><item><title>goroutine vs tokio</title><link>https://donnol.github.io/posts/2022/02/goroutine_vs_tokio/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/goroutine_vs_tokio/</guid><description>Reddit讨论贴
Go uses a different strategy for blocking systemcalls. It does not run them on a threadpool - it moves all the other goroutines that are queued to run on the current thread to a new worker thread, then runs the blocking systemcall on the current thread. This minimizes context switching.
You can do this in tokio as well, using task::block_in_place. If I change your code to use that instead of tokio::fs, it gets a lot closer to the go numbers.</description></item><item><title>go runtime chan</title><link>https://donnol.github.io/posts/2022/02/go_runtime_chan/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/go_runtime_chan/</guid><description>src/runtime/chan.go:
// Invariants: // At least one of c.sendq and c.recvq is empty, // except for the case of an unbuffered channel with a single goroutine // blocked on it for both sending and receiving using a select statement, // in which case the length of c.sendq and c.recvq is limited only by the // size of the select statement. // // For buffered channels, also: // c.qcount &amp;gt; 0 implies that c.</description></item><item><title>go work</title><link>https://donnol.github.io/posts/2022/02/go_work/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/go_work/</guid><description>go1.18将要推出workspace模式，此举是为了方便在本地开发多个不同module时的依赖管理。
命令说明：
$ go help work Go workspace provides access to operations on workspaces. Note that support for workspaces is built into many other commands, not just &amp;#39;go work&amp;#39;. See &amp;#39;go help modules&amp;#39; for information about Go\&amp;#39;s module system of which workspaces are a part. A workspace is specified by a go.work file that specifies a set of module directories with the &amp;#34;use&amp;#34; directive. These modules are used as root modules by the go command for builds and related operations.</description></item><item><title>杂念</title><link>https://donnol.github.io/posts/2022/02/distractions/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/02/distractions/</guid><description>情绪绑定 # 先把一样好（好看、好听、好闻）的东西抛出来，收集大众的积极情绪，进而把大家的情绪控制。
当这样东西喜，你就跟着喜；当这样东西悲，你就跟着悲；当这样东西静，你就跟着静。当这样东西动，你却看不到了。
信仰缺失的年代，把自己交付给这样的东西，只为换到一丝“慰挤”。
精神上的追求太难找到共鸣了，不如转而追求物质上的欢喜。每天吃吃喝喝，打打闹闹，不以物喜，不以己悲，不是挺好。
歌好听，那就听，何必在意歌手爱天怼地。如果真的这么较真，最好听歌前做好背景调查，如果不慎那歌手竟信息不详，那只好叫耳朵过滤掉了。若实在忍不住，也不妨在确实之前先恩施一番，以传我宽大之名。当然，如有丝言片语，只要未到石锤之境，自然轻松忽略。毕竟，真假难辨，不如不辩。
万一真的发现了黑历史，这时就要斟酌一番了，继续爱如谦，抑或恨如龙，搞不好就被别人发现你居然喜欢“黑”歌手，承担巨大的社会压力，就得不偿失了。
但是，害怕很难成事，只会坏事。如果只因为怕，那如何能算英雄，或者竟连个孤勇者都算不上，实在于心难安。那何不拉拢一批共同情绪的人，把那位别人先打黑。
嘿，只需证明别人是错的，何苦花费心思证明自己是对呢！
嗯，情绪输出总算有着落了，难受的只要是别人，自己就永远开心了，谁管别人是亲是疏，是喜是恶呢。只要不管不顾，虎牛之力也拿我没辙。对别人施暴，哪怕隔着个屏幕，也能爽到嗨。
别人这时就难受了：我好心劝你们远离毒瘤，居然不识抬举，还要拉帮结派来搞我。真的是越想越气，越气越想。奈何对方人多势众，单拳难敌四手。
自诩孤高者，自然不屑于群斗，但被逼到墙角了，也不得不群起。但标准越高，规模自然越小，苦费心思，依然难以匹敌，最后只好在猪圈方圈里丢三骂四了。
聪明人居然不懂不聪明人的想法，为什么敢自认聪明呢？
懂的话，大抵不会自称聪明人，而要转称愚人了吧。不聪明人也不真的不聪明，只是知道往身上贴上聪明人标签，更多时候只捞得个劳苦功低、得不偿失，活得还不如马屁精。
说到马屁精，我就猜到马屁是香的，或至少在喜爱之人闻来别有一番风味。
马屁精自然是冤枉的，不过说了几句某人爱听的话，或者不小心成了习惯&amp;ndash;见某人说某话，别人就来指责他，并打上马屁精标签，在圈里不断丢三骂四。只是不对你这样说话，你就这么生气，别人真的是坏。
谁怪你不是某人呢？你若竟是某人，想听几句某话，那还不难。只怕你成了某人，你还嫌少呢！
马屁精也不全是敌人，是非精、八卦精等“朋友”是大大的有。而且，精的本事也不能小，至少要在亦敌亦友的关系转变中拿捏得准确无误。不然闹出“人门前弄是非，精面前摆事实”的笑话来，就颜面无存了。
精，未成人之前，或竟不做人，选择做精，自然是如老鼠过街，人人喊打。
既然是精，那就必须没有情绪，笑脸迎臭脸自然是家常便饭。但只要熬出头，拥有一星半点某人之像，好生活自然而至，竟也开始享受到了某话。
路漫漫兮，修就是了。怎么修的，你就别管了。好好的丢三骂四还不够，还敢来管修的事，怕不是吃饱了思起淫欲来。
精在那里，你不骂，你敢往这边看，你怕不是想吃大过年不想吃的饭了。就不怕，我饭都不给你吃，把你饿成精。
原来精是饿出来的！</description></item></channel></rss>