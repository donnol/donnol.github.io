<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>05 on 我的简单博客</title><link>https://donnol.github.io/posts/2022/05/</link><description>Recent content in 05 on 我的简单博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/posts/2022/05/index.xml" rel="self" type="application/rss+xml"/><item><title>泛型</title><link>https://donnol.github.io/posts/2022/05/generic/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/generic/</guid><description>泛型 # 是什么？ # Type parameter, 类型参数。func Add[T Number](x, y T) (r T)，其中的T就是类型参数，它被接口Number所约束。
type Number interface { int | float32 } 调用方除了可自行决定参数值之外，还可以自行决定参数类型。Add[int](1, 2)，在调用时指定T的类型为int，同时传入参数值1,2必须是int类型。
这样使得代码更灵活，更有扩展性，同时更安全。
Go泛型 # 为什么？ # 静态语言，类型固定，比如这个函数：func Add(x, y int) int就要求参数和结果都必须是整型。
那如果后来又需要一个浮点数的加法呢？
那使用interface{}不也可以吗？
试看：
// 准确的描述出了参数和返回值的类型，非常方便 func Add(x, y int) int // 但也限制了Add函数的参数类型--只能接收`int` // Add(0.1, 0.2) // can&amp;#39;t do that // 那怎么办呢？再写一个针对float64的呗 func AddFloat64(x, y float64) float64 AddFloat64(0.1, 0.2) // it&amp;#39;s ok // 如果还要支持其它类型呢？再加一个吗，每多一种类型，就多加一个。。。 func AddInt8(x, y int8) int8 func AddInt32(x, y int32) int32 func AddFloat32(x, y float32) float32 // more.</description></item><item><title>Find out which Go version built your binary</title><link>https://donnol.github.io/posts/2022/05/find_go_version_the_app_use/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/find_go_version_the_app_use/</guid><description>根据二进制文件找出应用构建时使用的Go版本 # 使用 dlv:
dlv exec ./app &amp;gt; p runtime.buildVerion 或者，在代码里调用runtime.Version():
func main() { fmt.Println(&amp;#34;go version:&amp;#34;, runtime.Version()) } 参照</description></item><item><title>k8s是怎么维持pod的运行的呢？</title><link>https://donnol.github.io/posts/2022/05/k8s_how_to_keep_pods/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/k8s_how_to_keep_pods/</guid><description>k8s是怎么维持pod的运行的呢？ # 当接收了yaml配置的信息后，是怎么维持pod根据声明一直运行的呢？
让我们沿着命令执行的过程来一睹为快：kubectl apply -f pod.yaml.
源码位置：cmd/kubectl/kubectl.go -&amp;gt; staging/src/k8s.io/kubectl/pkg/cmd/cmd.go -&amp;gt; staging/src/k8s.io/kubectl/pkg/cmd/apply/apply.go
最终的执行方法：
func (o *ApplyOptions) Run() error { // 预处理 if o.PreProcessorFn != nil { klog.V(4).Infof(&amp;#34;Running apply pre-processor function&amp;#34;) if err := o.PreProcessorFn(); err != nil { return err } } // Enforce CLI specified namespace on server request. if o.EnforceNamespace { o.VisitedNamespaces.Insert(o.Namespace) } // Generates the objects using the resource builder if they have not // already been stored by calling &amp;#34;SetObjects()&amp;#34; in the pre-processor.</description></item><item><title>Go enum</title><link>https://donnol.github.io/posts/2022/05/go_enum/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2022/05/go_enum/</guid><description>Go enum # Go是没有内置枚举类型的，那么，当需要使用枚举时，该怎么办呢？
枚举说白了，就是一连串互斥的值，每个值代表一样事物或一个类型。
比如，现在需要一个颜色枚举，可以这样定义：
const ( Red = &amp;#34;Red&amp;#34; // 红色 Blue = &amp;#34;Blue&amp;#34; // 蓝色 Green = &amp;#34;Green&amp;#34; // 绿色 ) 也有这样定义的：
type Color string // 定义一个特定类型 // 枚举常量均声明为该类型 const ( Red Color = &amp;#34;Red&amp;#34; // 红色 Blue Color = &amp;#34;Blue&amp;#34; // 蓝色 Green Color = &amp;#34;Green&amp;#34; // 绿色 ) 这样做的好处是可以通过这个类型来更明显的标记出枚举字段来：
type Car struct { Name string Color Color // 颜色字段声明为Color类型，在阅读代码的时候就能知道这个字段正常的可选值范围 } 但是，上面的做法都需要面临一个问题，就是我需要一个返回全部枚举值的集合时，需要这样做：
func All() []Color { return []Color{ Red, Blue, Green, } } func (color Color) Name() string { switch color { case Red: return &amp;#34;红色&amp;#34; case Blue: return &amp;#34;蓝色&amp;#34; case Green: return &amp;#34;绿色&amp;#34; } return &amp;#34;&amp;#34; } 当在定义处新增值时，All和Name也要同步添加，对于开发人员来说，非常容易遗漏。</description></item></channel></rss>