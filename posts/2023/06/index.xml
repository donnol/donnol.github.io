<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>06 on 我的简单博客</title><link>https://donnol.github.io/posts/2023/06/</link><description>Recent content in 06 on 我的简单博客</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 26 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/posts/2023/06/index.xml" rel="self" type="application/rss+xml"/><item><title>ml sklearn</title><link>https://donnol.github.io/posts/2023/06/sklearn/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/sklearn/</guid><description>尝试 # $ pip install scikit-learn $ python3.10 &amp;gt;&amp;gt;&amp;gt; from sklearn.datasets import load_iris &amp;gt;&amp;gt;&amp;gt; from sklearn.linear_model import LogisticRegression &amp;gt;&amp;gt;&amp;gt; data, y = load_iris(return_X_y=True) &amp;gt;&amp;gt;&amp;gt; clf = LogisticRegression(random_state=0, max_iter=1000).fit(data, y) &amp;gt;&amp;gt;&amp;gt; clf.predict(data[:2, :]) &amp;gt;&amp;gt;&amp;gt; clf.predict_proba(data[:2, :]) &amp;gt;&amp;gt;&amp;gt; clf.score(data, y) 查找操作记录 # cat ~/.python_history.
模型、策略、优化算法 # 模型是输入输出函数：Y = F(X).
策略是拟合过程的损失函数：L(Y, F(X)), 可以是均方误差、对数损失函数、交叉熵损失函数。
优化算法：确定模型和损失函数后，可以加速计算的方法，比如：随机梯度下降法、牛顿法、拟牛顿法。</description></item><item><title>windows route</title><link>https://donnol.github.io/posts/2023/06/route/</link><pubDate>Tue, 13 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/route/</guid><description>Windows通过route命令配置路由 # route add 192.168.0.0 mask 255.255.0.0 192.168.66.254 -p 192.168.0.0: 目标主机的网络地址
mask 255.255.0.0: 掩码，与目标网络地址对应
192.168.66.254: 网关地址
Linux通过ip route命令配置路由 # NOTE: ip route是route命令的升级版本，但route命令仍在大量使用。
# 设置192.168.4.0网段的网关为192.168.166.1,数据走wlan0接口 # /24 is the network prefix. The network prefix is the number of enabled bits in the subnet mask. # 24位子网掩码 ip route add 192.168.4.0/24 via 192.168.166.1 dev wlan0 # 255.255.255.0为子网掩码 # 3*8(255即是8位二进制) ip route add 192.168.0.0/255.255.255.0 dev eth0 子网掩码 # ip地址包含了网络地址和主机地址两部分，怎么区分呢？
这是就需要用到子网掩码了，它是一个与ip地址同位数、连续的数，可以用位数24表示，也可以用地址255.255.255.0表示。
两个地址经过位与运算后，ip中没被掩盖的部分即是网络地址，被掩盖的部分即是主机地址。</description></item><item><title>wsl2初始化Mysql数据库速度非常慢</title><link>https://donnol.github.io/posts/2023/06/wsl2/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/06/wsl2/</guid><description> wsl2版本 # &amp;gt; wsl.exe -v WSL version: 1.2.5.0 Kernel version: 5.15.90.1 WSLg version: 1.0.51 MSRDC version: 1.2.3770 Direct3D version: 1.608.2-61064218 DXCore version: 10.0.25131.1002-220531-1700.rs-onecore-base2-hyp Windows version: 10.0.19045.3031 使用过程中，因为磁盘空间问题，把子系统安装位置从C盘转移到了其它盘。
操作 # 把sql目录里的*.sql文件逐一导入到8.0.33版本的Mysql。
尽管sql文件不多也不大，但是整个过程非常慢。其中一个有一千个左右的INSERT IGNORE语句，更是用了将近12分钟才完成。
怎么办？ # 改为通过网络访问本机的数据库。
端口 # 一文中提到：
根据我的观察, 如果Windows本地启动了指定端口, 这时WSL2中虽然可以使用相同的端口, 但是localhost:port 将指向Windows的服务, WSL的服务将会被覆盖!
当然了, 如果我们配置了端口转发, 转发的IP是WSL的地址, 而不是localhost, 那么WSL将会覆盖Windows的服务!
而我的观察是，
我发现本地起了数据库服务之后，在wsl2里起数据库服务（mysql服务，端口都是3306）的情况下，是不会报端口重复绑定错误的。
但是如果我在wsl2里先起一个服务，绑定端口14222后，再在主机起相同服务，想绑定相同端口时，则会报错端口已被绑定。
如果我是先在主机起上述服务，然后再在wsl2起该服务，则能正常启动。那在主机访问localhost:[port]时会访问到哪个呢？此时访问到的是主机的服务。
所以端口是否占用会不会还跟服务起的顺序有关呢？
暂时未看到有确切的描述。
但是，经过上面的实验，可以认为：
先在主机起服务，再在wsl2起服务绑定相同端口时，服务可正常启动；在主机访问`localhost:[port]`时访问的是主机的服务；在wsl2里访问的则是wsl2的服务，除非手动指定主机IP。 而如果先在wsl2里起了服务，再在主机起服务（绑定相同端口: 14222），则会报错端口已被绑定。 但是，如果在wsl2里先起的mysql服务，再在主机起，则不会报错，所以还跟端口值有关？</description></item></channel></rss>