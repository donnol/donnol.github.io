<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>09 on 我的简单博客</title><link>https://donnol.github.io/posts/2023/09/</link><description>Recent content in 09 on 我的简单博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 12 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://donnol.github.io/posts/2023/09/index.xml" rel="self" type="application/rss+xml"/><item><title>do</title><link>https://donnol.github.io/posts/2023/09/your_life/</link><pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/your_life/</guid><description>你在做的事情，是在重复已知的东西，还是在探索未知的东西。
这决定了所能达到的高度。</description></item><item><title>Go Empty Struct</title><link>https://donnol.github.io/posts/2023/09/go_empty_struct/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/go_empty_struct/</guid><description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;unsafe&amp;#34; ) func main() { type A struct{} type B struct{} // 结构体里的字段都是`Empty Struct`时，占用空间为0 type S struct { A A B B } var s S fmt.Println(unsafe.Sizeof(s)) // prints 0 // 如果是指针，占用空间为8 fmt.Println(unsafe.Sizeof(&amp;amp;s)) // prints 8 var x [1000000000]struct{} // 可以同时存储A和B类型元素 x[0] = A{} x[1] = B{} fmt.Println(unsafe.Sizeof(x)) // prints 0 // 地址一样 fmt.Printf(&amp;#34;%p, %p&amp;#34;, &amp;amp;x[0], &amp;amp;x[1]) // 0x54e3a0, 0x54e3a0 } See also</description></item><item><title/><link>https://donnol.github.io/posts/2023/09/%E4%B8%BA%E4%BA%86%E4%BB%96%E6%98%AF%E8%87%AA%E5%B7%B1%E8%BD%AF%E5%BC%B1%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%9F%E5%8F%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://donnol.github.io/posts/2023/09/%E4%B8%BA%E4%BA%86%E4%BB%96%E6%98%AF%E8%87%AA%E5%B7%B1%E8%BD%AF%E5%BC%B1%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%9F%E5%8F%A3/</guid><description>软弱如绵羊，却生造出老虎护幼崽的形象，只需一句“都是为了他”。</description></item></channel></rss>